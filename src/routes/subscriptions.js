const express = require('express');
const router = express.Router();
const { Subscriptions, User, Notifications } = require('../models');
const { authenticateToken } = require('../middleware/auth');
const { APILogger } = require('../utils/logger');
const rateLimit = require('express-rate-limit');
const Joi = require('joi');
const SubscriptionMetrics = require('../utils/metrics');
const AuditLog = require('../utils/auditLog');
const { validatePaginationParams, createPaginationResponse } = require('../utils/pagination');

// Rate limiting for expensive operations
const subscriptionRateLimit = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 5, // maximum 5 subscription operations per 15 minutes
  message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'
});

// Validation schemas
const subscriptionSchema = Joi.object({
  subscription_type: Joi.string().valid('VIP', 'PREMIUM').required(),
  duration_months: Joi.number().valid(1, 3, 12).default(1),
  payment_method: Joi.string().valid('balance', 'card', 'yandex_money', 'qiwi', 'paypal', 'crypto').default('balance'),
  promo_code: Joi.string().optional(),
  auto_renewal: Joi.boolean().default(true)
});

const changePlanSchema = Joi.object({
  new_plan_type: Joi.string().valid('VIP', 'PREMIUM').required(),
  duration_months: Joi.number().valid(1, 3, 12).default(1)
});

// GET /api/subscriptions/pricing - –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤
router.get('/pricing', authenticateToken, async (req, res) => {
  const logger = new APILogger('SUBSCRIPTIONS');
  
  try {
    logger.logRequest(req, 'GET /subscriptions/pricing');
    
    const userId = req.user.login;

    logger.logBusinessLogic(1, '–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤', {
      user_id: userId
    }, req);

    const pricing = await Subscriptions.getPricing();
    const features = await Subscriptions.getFeatures();

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const activeSubscription = await Subscriptions.getUserActiveSubscription(userId);
    
    // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findOne({ 
      where: { login: userId },
      attributes: ['balance', 'viptype']
    });

    const responseData = {
      pricing,
      features,
      user_balance: user.balance,
      current_subscription: {
        type: user.viptype,
        expires_at: activeSubscription ? activeSubscription.end_date : null,
        is_active: activeSubscription ? activeSubscription.isActive() : false,
        days_remaining: activeSubscription ? activeSubscription.getDaysRemaining() : 0
      },
      available_payment_methods: [
        { id: 'balance', name: '–ë–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞', icon: 'üí≥' },
        { id: 'card', name: '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞', icon: 'üí≥' },
        { id: 'yandex_money', name: '–ÆMoney', icon: 'üü°' },
        { id: 'qiwi', name: 'QIWI', icon: 'ü•ù' },
        { id: 'paypal', name: 'PayPal', icon: 'üÖøÔ∏è' },
        { id: 'crypto', name: '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞', icon: '‚Çø' }
      ]
    };

    logger.logSuccess(req, 200, {
      current_subscription_type: user.viptype
    });
    
    res.json(responseData);

  } catch (error) {
    logger.logError(req, error);
    res.status(500).json({
      error: 'server_error',
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∞—Ä–∏—Ñ–æ–≤'
    });
  }
});

// POST /api/subscriptions/create - –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
router.post('/create', subscriptionRateLimit, authenticateToken, async (req, res) => {
  const logger = new APILogger('SUBSCRIPTIONS');
  
  try {
    logger.logRequest(req, 'POST /subscriptions/create');
    
    const userId = req.user.login;

    // Validate input data
    const { error, value } = subscriptionSchema.validate(req.body);
    if (error) {
      return res.status(400).json({
        error: 'validation_error',
        message: error.details[0].message
      });
    }

    const {
      subscription_type,
      duration_months,
      payment_method,
      promo_code,
      auto_renewal
    } = value;

    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.logBusinessLogic(1, '–í—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏', {
      subscription_type,
      duration_months,
      payment_method,
      promo_code,
      auto_renewal,
      user_id: userId
    }, req);

    if (!subscription_type || !['VIP', 'PREMIUM'].includes(subscription_type)) {
      return res.status(400).json({
        error: 'invalid_subscription_type',
        message: '–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ (VIP –∏–ª–∏ PREMIUM)'
      });
    }

    if (![1, 3, 12].includes(parseInt(duration_months))) {
      return res.status(400).json({
        error: 'invalid_duration',
        message: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–µ—Ä–∏–æ–¥—ã: 1, 3 –∏–ª–∏ 12 –º–µ—Å—è—Ü–µ–≤'
      });
    }

    logger.logBusinessLogic(1, '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏', {
      user_id: userId,
      subscription_type,
      duration_months: parseInt(duration_months),
      payment_method,
      promo_code,
      auto_renewal
    }, req);

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
      const user = await User.findOne({ 
        where: { login: userId }
      });
      
      if (!user) {
        return res.status(404).json({
          error: 'user_not_found',
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
      }
      
      // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
      const subscription = await Subscriptions.createSubscription({
        user_id: userId,
        subscription_type,
        duration_months: parseInt(duration_months),
        payment_method,
        promo_code,
        auto_renewal
      });
      
      // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
      logger.logBusinessLogic(2, '–ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞', {
        subscription_id: subscription.id,
        payment_amount: subscription.payment_amount,
        user_balance: user.balance
      }, req);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –µ—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–∞
      if (payment_method === 'balance') {
        if (user.balance < subscription.payment_amount) {
          // –£–¥–∞–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
          await subscription.destroy();
          
          return res.status(400).json({
            error: 'insufficient_balance',
            message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ',
            required: subscription.payment_amount,
            available: user.balance
          });
        }

        // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        logger.logDatabase('UPDATE', 'users', {
          user_id: userId,
          balance_change: -subscription.payment_amount
        }, req);

        await User.update(
          { balance: user.balance - subscription.payment_amount },
          { where: { login: userId } }
        );

        logger.logDatabase('UPDATE', 'subscriptions', {
          subscription_id: subscription.id,
          status: 'active'
        }, req);

        await subscription.activate();

        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        try {
          await Notifications.createNotification({
            user_id: userId,
            type: 'premium',
            title: '–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!',
            message: `–í–∞—à–∞ ${subscription_type} –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ ${subscription.end_date.toLocaleDateString('ru-RU')}`,
            priority: 'high',
            data: {
              subscription_id: subscription.id,
              subscription_type,
              end_date: subscription.end_date
            }
          });
        } catch (notifError) {
          logger.logWarning('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', notifError, req);
        }

        logger.logResult('–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏', true, {
          subscription_id: subscription.id,
          subscription_type,
          end_date: subscription.end_date
        }, req);

        const responseData = {
          success: true,
          subscription: {
            id: subscription.id,
            type: subscription.subscription_type,
            status: subscription.status,
            start_date: subscription.start_date,
            end_date: subscription.end_date,
            payment_amount: subscription.payment_amount,
            auto_renewal: subscription.auto_renewal
          },
          remaining_balance: user.balance - subscription.payment_amount,
          message: '–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞'
        };

        // Record metrics and audit
        SubscriptionMetrics.recordSubscriptionCreated(subscription_type, subscription.payment_amount);
        AuditLog.logFinancialOperation(userId, 'subscription_created', subscription.payment_amount, {
          subscription_id: subscription.id,
          type: subscription_type,
          duration: duration_months
        });

        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º viptype –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
        await Subscriptions.syncUserVipType(userId);

        logger.logSuccess(req, 201, responseData);
        res.status(201).json(responseData);

      } else {
        // –î–ª—è –¥—Ä—É–≥–∏—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ–ø–ª–∞—Ç—ã
        const responseData = {
          success: true,
          subscription: {
            id: subscription.id,
            type: subscription.subscription_type,
            status: subscription.status,
            payment_amount: subscription.payment_amount,
            payment_method: subscription.payment_method
          },
          payment_info: {
            amount: subscription.payment_amount,
            currency: subscription.currency,
            description: `${subscription_type} –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${duration_months} –º–µ—Å.`
          },
          message: '–ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞, –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã'
        };

        // Record metrics and audit
        SubscriptionMetrics.recordSubscriptionCreated(subscription_type, subscription.payment_amount);
        AuditLog.logFinancialOperation(userId, 'subscription_created', subscription.payment_amount, {
          subscription_id: subscription.id,
          type: subscription_type,
          duration: duration_months
        });

        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º viptype –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
        await Subscriptions.syncUserVipType(userId);

        logger.logSuccess(req, 201, responseData);
        res.status(201).json(responseData);
      }

    } catch (subscriptionError) {
      logger.logError(req, subscriptionError);
      
      return res.status(400).json({
        error: 'subscription_error',
        message: subscriptionError.message
      });
    }

  } catch (error) {
    logger.logError(req, error);
    res.status(500).json({
      error: 'server_error',
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏'
    });
  }
});

// GET /api/subscriptions/current - –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
router.get('/current', authenticateToken, async (req, res) => {
  const logger = new APILogger('SUBSCRIPTIONS');
  
  try {
    logger.logRequest(req, 'GET /subscriptions/current');
    
    const userId = req.user.login;

    logger.logBusinessLogic(1, '–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏', {
      user_id: userId
    }, req);

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º viptype –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–µ–∞–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –ø–æ–¥–ø–∏—Å–∫–∏
    await Subscriptions.syncUserVipType(userId);
    
    const userStatus = await Subscriptions.getUserCurrentStatus(userId);
    
    let responseData;

    if (userStatus.has_subscription) {
      // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
      const activeSubscription = await Subscriptions.getUserActiveSubscription(userId);
      
      responseData = {
        has_subscription: true,
        plan: userStatus.plan.toLowerCase(),
        expires_at: userStatus.end_date,
        auto_renew: activeSubscription.auto_renewal,
        days_remaining: activeSubscription.getDaysRemaining(),
        subscription: {
          id: activeSubscription.id,
          type: activeSubscription.subscription_type,
          status: activeSubscription.status,
          start_date: activeSubscription.start_date,
          end_date: activeSubscription.end_date,
          auto_renewal: activeSubscription.auto_renewal,
          payment_amount: activeSubscription.payment_amount,
          is_active: activeSubscription.isActive(),
          created_at: activeSubscription.created_at
        },
        features: (await Subscriptions.getFeatures())[userStatus.plan]
      };
    } else {
      responseData = {
        has_subscription: false,
        plan: 'free', // –í—Å–µ–≥–¥–∞ 'free' –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞
        expires_at: null,
        auto_renew: false,
        days_remaining: 0,
        subscription: null,
        features: null // –£ –±–∞–∑–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞ –Ω–µ—Ç features
      };
    }

    logger.logSuccess(req, 200, {
      has_subscription: userStatus.has_subscription,
      subscription_type: userStatus.plan
    });
    
    res.json(responseData);

  } catch (error) {
    logger.logError(req, error);
    res.status(500).json({
      error: 'server_error',
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏'
    });
  }
});

// POST /api/subscriptions/:id/cancel - –û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏
router.post('/:id/cancel', authenticateToken, async (req, res) => {
  const logger = new APILogger('SUBSCRIPTIONS');
  
  try {
    logger.logRequest(req, 'POST /subscriptions/:id/cancel');
    
    const { id } = req.params;
    const { reason } = req.body;
    const userId = req.user.login;

    logger.logBusinessLogic(1, '–û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏', {
      user_id: userId,
      subscription_id: id,
      reason
    }, req);

    const subscription = await Subscriptions.findOne({
      where: {
        id: parseInt(id),
        user_id: userId,
        status: 'active'
      }
    });

    if (!subscription) {
      return res.status(404).json({
        error: 'subscription_not_found',
        message: '–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    logger.logDatabase('UPDATE', 'subscriptions', {
      subscription_id: id,
      status: 'cancelled',
      notes: reason
    }, req);

    // –û—Ç–º–µ–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É (—ç—Ç–æ —Ç–∞–∫–∂–µ —Å–±—Ä–æ—Å–∏—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ FREE)
    await subscription.cancel();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫–∏ —Å –ø—Ä–∏—á–∏–Ω–æ–π –æ—Ç–º–µ–Ω—ã
    if (reason) {
      await subscription.update({ notes: reason });
    }
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ FREE
    await User.update(
      { viptype: 'FREE' },
      { where: { login: userId } }
    );
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º viptype –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    await Subscriptions.syncUserVipType(userId);

    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    try {
      await Notifications.createNotification({
        user_id: userId,
        type: 'system',
        title: '–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞',
        message: `–í–∞—à–∞ ${subscription.subscription_type} –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.`,
        priority: 'normal',
        data: {
          subscription_id: subscription.id,
          end_date: subscription.end_date
        }
      });
    } catch (notifError) {
      logger.logWarning('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', notifError, req);
    }

    logger.logResult('–û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏', true, {
      subscription_id: id,
      end_date: subscription.end_date
    }, req);

    const responseData = {
      success: true,
      subscription: {
        id: subscription.id,
        status: subscription.status,
        end_date: subscription.end_date,
        auto_renewal: subscription.auto_renewal
      },
      message: '–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –°—Ç–∞—Ç—É—Å —Å–±—Ä–æ—à–µ–Ω –Ω–∞ –±–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω'
    };

    logger.logSuccess(req, 200, responseData);
    res.json(responseData);

  } catch (error) {
    logger.logError(req, error);
    res.status(500).json({
      error: 'server_error',
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏'
    });
  }
});

// POST /api/subscriptions/cancel - –û—Ç–º–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.post('/cancel', authenticateToken, async (req, res) => {
  const logger = new APILogger('SUBSCRIPTIONS');
  
  try {
    logger.logRequest(req, 'POST /subscriptions/cancel');
    
    const { reason } = req.body;
    const userId = req.user.login;

    logger.logBusinessLogic(1, '–û—Ç–º–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏', {
      user_id: userId,
      reason
    }, req);

    // –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const subscription = await Subscriptions.findOne({
      where: {
        user_id: userId,
        status: 'active'
      }
    });

    if (!subscription) {
      return res.status(404).json({
        error: 'subscription_not_found',
        message: '–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    logger.logDatabase('UPDATE', 'subscriptions', {
      subscription_id: subscription.id,
      status: 'cancelled',
      notes: reason
    }, req);

    // –û—Ç–º–µ–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É (—ç—Ç–æ —Ç–∞–∫–∂–µ —Å–±—Ä–æ—Å–∏—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ FREE)
    await subscription.cancel();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫–∏ —Å –ø—Ä–∏—á–∏–Ω–æ–π –æ—Ç–º–µ–Ω—ã
    if (reason) {
      await subscription.update({ notes: reason });
    }
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ FREE
    await User.update(
      { viptype: 'FREE' },
      { where: { login: userId } }
    );
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º viptype –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    await Subscriptions.syncUserVipType(userId);

    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    try {
      await Notifications.createNotification({
        user_id: userId,
        type: 'system',
        title: '–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞',
        message: `–í–∞—à–∞ ${subscription.subscription_type} –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.`,
        priority: 'normal',
        data: {
          subscription_id: subscription.id,
          end_date: subscription.end_date
        }
      });
    } catch (notificationError) {
      logger.logWarning('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', notificationError, req);
    }

    // Record metrics and audit
    SubscriptionMetrics.recordSubscriptionCancelled(subscription.subscription_type, reason);
    AuditLog.logSubscriptionChange(userId, 'active', 'cancelled', reason);

    logger.logResult('–û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏', true, {
      subscription_id: subscription.id,
      reason
    }, req);

    const responseData = {
      success: true,
      message: '–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞',
      subscription: {
        id: subscription.id,
        status: subscription.status,
        end_date: subscription.end_date
      }
    };

    logger.logSuccess(req, 200, responseData);
    res.json(responseData);

  } catch (error) {
    logger.logError(req, error);
    res.status(500).json({
      error: 'server_error',
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏'
    });
  }
});

// PUT /api/subscriptions/:id/auto-renewal - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º
router.put('/:id/auto-renewal', authenticateToken, async (req, res) => {
  const logger = new APILogger('SUBSCRIPTIONS');
  
  try {
    logger.logRequest(req, 'PUT /subscriptions/:id/auto-renewal');
    
    const { id } = req.params;
    const { enabled } = req.body;
    const userId = req.user.login;

    if (typeof enabled !== 'boolean') {
      return res.status(400).json({
        error: 'invalid_data',
        message: '–ü–∞—Ä–∞–º–µ—Ç—Ä enabled –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å boolean'
      });
    }

    logger.logBusinessLogic(1, '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º', {
      user_id: userId,
      subscription_id: id,
      enabled
    }, req);

    const subscription = await Subscriptions.findOne({
      where: {
        id: parseInt(id),
        user_id: userId,
        status: ['active', 'pending']
      }
    });

    if (!subscription) {
      return res.status(404).json({
        error: 'subscription_not_found',
        message: '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    logger.logDatabase('UPDATE', 'subscriptions', {
      subscription_id: id,
      auto_renewal: enabled
    }, req);

    await subscription.update({ auto_renewal: enabled });

    logger.logResult('–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è', true, {
      subscription_id: id,
      auto_renewal: enabled
    }, req);

    const responseData = {
      success: true,
      subscription: {
        id: subscription.id,
        auto_renewal: subscription.auto_renewal
      },
      message: enabled ? '–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ' : '–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ'
    };

    logger.logSuccess(req, 200, responseData);
    res.json(responseData);

  } catch (error) {
    logger.logError(req, error);
    res.status(500).json({
      error: 'server_error',
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è'
    });
  }
});

// PUT /api/subscriptions/auto-renewal - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
router.put('/auto-renewal', authenticateToken, async (req, res) => {
  const logger = new APILogger('SUBSCRIPTIONS');
  
  try {
    logger.logRequest(req, 'PUT /subscriptions/auto-renewal');
    
    const { auto_renewal } = req.body;
    const userId = req.user.login;

    if (typeof auto_renewal !== 'boolean') {
      return res.status(400).json({
        error: 'invalid_data',
        message: '–ü–∞—Ä–∞–º–µ—Ç—Ä auto_renewal –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å boolean'
      });
    }

    logger.logBusinessLogic(1, '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏', {
      user_id: userId,
      auto_renewal
    }, req);

    // –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const subscription = await Subscriptions.findOne({
      where: {
        user_id: userId,
        status: 'active'
      }
    });

    if (!subscription) {
      return res.status(404).json({
        error: 'subscription_not_found',
        message: '–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    logger.logDatabase('UPDATE', 'subscriptions', {
      subscription_id: subscription.id,
      auto_renewal
    }, req);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ
    await subscription.update({ auto_renewal });

    // Record metrics and audit
    SubscriptionMetrics.recordAutoRenewal(subscription.subscription_type, true);
    AuditLog.logAutoRenewalChange(userId, subscription.id, auto_renewal);

    logger.logResult('–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è', true, {
      subscription_id: subscription.id,
      auto_renewal
    }, req);

    const responseData = {
      success: true,
      message: `–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ ${auto_renewal ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–æ—Ç–∫–ª—é—á–µ–Ω–æ'}`,
      subscription: {
        id: subscription.id,
        auto_renewal: subscription.auto_renewal
      }
    };

    logger.logSuccess(req, 200, responseData);
    res.json(responseData);

  } catch (error) {
    logger.logError(req, error);
    res.status(500).json({
      error: 'server_error',
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è'
    });
  }
});

// GET /api/subscriptions/history - –ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥–ø–∏—Å–æ–∫
router.get('/history', authenticateToken, async (req, res) => {
  const logger = new APILogger('SUBSCRIPTIONS');
  
  try {
    logger.logRequest(req, 'GET /subscriptions/history');
    
    const {
      page,
      limit,
      status = null
    } = req.query;

    const userId = req.user.login;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const { page: pageNum, limit: limitNum, offset } = validatePaginationParams(
      { page, limit },
      { defaultPage: 1, defaultLimit: 20, maxLimit: 100 }
    );

    logger.logBusinessLogic(1, '–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫', {
      user_id: userId,
      page: pageNum,
      limit: limitNum,
      status
    }, req);

    const subscriptions = await Subscriptions.getUserSubscriptionHistory(userId, {
      limit: limitNum,
      offset,
      status
    });

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    const totalCount = await Subscriptions.count({
      where: { user_id: userId }
    });

    const responseData = {
      subscriptions: subscriptions.map(sub => ({
        id: sub.id,
        type: sub.subscription_type,
        status: sub.status,
        start_date: sub.start_date,
        end_date: sub.end_date,
        payment_amount: sub.payment_amount,
        payment_method: sub.payment_method,
        auto_renewal: sub.auto_renewal,
        promo_code: sub.promo_code,
        discount_amount: sub.discount_amount,
        created_at: sub.created_at,
        days_remaining: sub.getDaysRemaining(),
        is_active: sub.isActive(),
        is_expired: sub.isExpired()
      })),
      pagination: createPaginationResponse(pageNum, limitNum, totalCount),
      // ADD: payments array for frontend compatibility
      payments: subscriptions.map(sub => ({
        id: sub.id,
        plan: sub.subscription_type.toLowerCase(),
        amount: sub.payment_amount,
        created_at: sub.created_at,
        status: sub.status
      }))
    };

    logger.logSuccess(req, 200, {
      subscriptions_count: subscriptions.length,
      total_count: totalCount
    });
    
    res.json(responseData);

  } catch (error) {
    logger.logError(req, error);
    res.status(500).json({
      error: 'server_error',
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫'
    });
  }
});

// POST /api/subscriptions/validate-promo - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
router.post('/validate-promo', authenticateToken, async (req, res) => {
  const logger = new APILogger('SUBSCRIPTIONS');
  
  try {
    logger.logRequest(req, 'POST /subscriptions/validate-promo');
    
    const { promo_code, subscription_type = 'VIP', duration_months = 1 } = req.body;
    const userId = req.user.login;

    if (!promo_code) {
      return res.status(400).json({
        error: 'missing_promo_code',
        message: '–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥'
      });
    }

    logger.logBusinessLogic(1, '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞', {
      user_id: userId,
      promo_code,
      subscription_type,
      duration_months
    }, req);

    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    const promoCodes = {
      'WELCOME10': { discount: 0.1, description: '–°–∫–∏–¥–∫–∞ 10% –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' },
      'SAVE20': { discount: 0.2, description: '–°–∫–∏–¥–∫–∞ 20%' },
      'PREMIUM30': { discount: 0.3, description: '–°–∫–∏–¥–∫–∞ 30% –Ω–∞ Premium', types: ['PREMIUM'] },
      'STUDENT15': { discount: 0.15, description: '–°–∫–∏–¥–∫–∞ 15% –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤' }
    };

    const promoData = promoCodes[promo_code.toUpperCase()];

    if (!promoData) {
      return res.status(404).json({
        error: 'invalid_promo_code',
        message: '–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
    if (promoData.types && !promoData.types.includes(subscription_type)) {
      return res.status(400).json({
        error: 'promo_code_restriction',
        message: `–≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –¥–µ–π—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è ${promoData.types.join(', ')} –ø–æ–¥–ø–∏—Å–∫–∏`
      });
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–∏–¥–∫—É
    const pricing = await Subscriptions.getPricing();
    let basePrice;
    
    switch (parseInt(duration_months)) {
      case 1:
        basePrice = pricing[subscription_type].monthly;
        break;
      case 3:
        basePrice = pricing[subscription_type].quarterly;
        break;
      case 12:
        basePrice = pricing[subscription_type].yearly;
        break;
      default:
        basePrice = pricing[subscription_type].monthly;
    }

    const discountAmount = Math.round(basePrice * promoData.discount);
    const finalPrice = basePrice - discountAmount;

    // Record metrics and audit
    SubscriptionMetrics.recordPromoCodeUsed(promo_code, discountAmount, subscription_type);
    AuditLog.logPromoCodeUsage(userId, promo_code, discountAmount, subscription_type);

    logger.logResult('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞', true, {
      promo_code,
      discount_amount: discountAmount,
      final_price: finalPrice
    }, req);

    const responseData = {
      valid: true,
      promo_code,
      description: promoData.description,
      discount_percent: Math.round(promoData.discount * 100),
      original_price: basePrice,
      discount_amount: discountAmount,
      final_price: finalPrice,
      savings: discountAmount
    };

    logger.logSuccess(req, 200, responseData);
    res.json(responseData);

  } catch (error) {
    logger.logError(req, error);
    res.status(500).json({
      error: 'server_error',
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞'
    });
  }
});

// POST /api/subscriptions/change-plan - –°–º–µ–Ω–∞ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
router.post('/change-plan', subscriptionRateLimit, authenticateToken, async (req, res) => {
  const logger = new APILogger('SUBSCRIPTIONS');
  
  try {
    logger.logRequest(req, 'POST /subscriptions/change-plan');
    
    const userId = req.user.login;

    // Validate input data
    const { error, value } = changePlanSchema.validate(req.body);
    if (error) {
      return res.status(400).json({
        error: 'validation_error',
        message: error.details[0].message
      });
    }

    const {
      new_plan_type,
      duration_months
    } = value;

    if (!new_plan_type || !['VIP', 'PREMIUM'].includes(new_plan_type)) {
      return res.status(400).json({
        error: 'invalid_plan_type',
        message: '–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ (VIP –∏–ª–∏ PREMIUM)'
      });
    }

    if (![1, 3, 12].includes(parseInt(duration_months))) {
      return res.status(400).json({
        error: 'invalid_duration',
        message: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–µ—Ä–∏–æ–¥—ã: 1, 3 –∏–ª–∏ 12 –º–µ—Å—è—Ü–µ–≤'
      });
    }

    logger.logBusinessLogic(1, '–°–º–µ–Ω–∞ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞', {
      user_id: userId,
      new_plan_type,
      duration_months: parseInt(duration_months)
    }, req);

    try {
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º SubscriptionManager
      const SubscriptionManager = require('../../services/SubscriptionManager');
      const subscriptionManager = new SubscriptionManager();
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–º–µ–Ω—É —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
      const result = await subscriptionManager.changeSubscriptionPlan(
        userId, 
        new_plan_type, 
        parseInt(duration_months)
      );

      // Record metrics and audit
      SubscriptionMetrics.recordPlanChange('unknown', new_plan_type, result.new_subscription.payment_amount);
      AuditLog.logPlanChange(userId, 'unknown', new_plan_type, result.new_subscription.payment_amount);

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º viptype –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤—ã–º –ø–ª–∞–Ω–æ–º
      await Subscriptions.syncUserVipType(userId);

      logger.logResult('–°–º–µ–Ω–∞ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞', true, {
        new_plan: new_plan_type,
        subscription_id: result.new_subscription.id,
        new_balance: result.new_balance
      }, req);

      const responseData = {
        success: true,
        message: `–¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${new_plan_type}`,
        new_subscription: {
          id: result.new_subscription.id,
          type: result.new_subscription.subscription_type,
          status: result.new_subscription.status,
          start_date: result.new_subscription.start_date,
          end_date: result.new_subscription.end_date,
          auto_renewal: result.new_subscription.auto_renewal
        },
        new_balance: result.new_balance
      };

      logger.logSuccess(req, 200, responseData);
      res.json(responseData);

    } catch (subscriptionError) {
      logger.logError(req, subscriptionError);
      
      return res.status(400).json({
        error: 'subscription_error',
        message: subscriptionError.message
      });
    }

  } catch (error) {
    logger.logError(req, error);
    res.status(500).json({
      error: 'server_error',
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞'
    });
  }
});

module.exports = router;