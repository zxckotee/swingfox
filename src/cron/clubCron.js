const cron = require('node-cron');
const { ClubEvents } = require('../models');

class ClubCron {
  constructor() {
    this.tasks = [];
  }

  start() {
    console.log('üïê –ó–∞–ø—É—Å–∫ cron-–∑–∞–¥–∞—á –¥–ª—è –∫–ª—É–±–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 1:00)
    this.tasks.push(
      cron.schedule('0 1 * * *', async () => {
        try {
          console.log('‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π...');
          
          const yesterday = new Date();
          yesterday.setDate(yesterday.getDate() - 1);

          const expiredEvents = await ClubEvents.findAll({
            where: {
              date: {
                [require('sequelize').Op.lt]: yesterday
              }
            }
          });

          console.log(`üìÖ –ù–∞–π–¥–µ–Ω–æ ${expiredEvents.length} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π`);
          
          // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
          // –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–æ–≤, –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ç.–¥.
          
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ cron-–∑–∞–¥–∞—á–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:', error);
        }
      }, {
        scheduled: true,
        timezone: 'Europe/Moscow'
      })
    );

    console.log('‚úÖ Cron-–∑–∞–¥–∞—á–∏ –¥–ª—è –∫–ª—É–±–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∑–∞–ø—É—â–µ–Ω—ã');
  }

  stop() {
    console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ cron-–∑–∞–¥–∞—á –¥–ª—è –∫–ª—É–±–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...');
    
    this.tasks.forEach(task => {
      task.stop();
    });
    
    this.tasks = [];
    console.log('‚úÖ Cron-–∑–∞–¥–∞—á–∏ –¥–ª—è –∫–ª—É–±–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
  }
}

module.exports = ClubCron;