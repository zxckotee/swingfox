const cron = require('node-cron');
const ClubBotService = require('../services/clubBots');
const { ClubEvents, ClubBots } = require('../models');

class ClubCron {
  constructor() {
    this.tasks = [];
  }

  start() {
    console.log('üïê –ó–∞–ø—É—Å–∫ cron-–∑–∞–¥–∞—á –¥–ª—è –∫–ª—É–±–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...');

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –∫–∞–∂–¥—ã–π —á–∞—Å
    this.tasks.push(
      cron.schedule('0 * * * *', async () => {
        try {
          console.log('üìÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö...');
          const result = await ClubBotService.sendEventReminders();
          if (result.success) {
            console.log('‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã');
          } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:', result.message);
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ cron-–∑–∞–¥–∞—á–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:', error);
        }
      }, {
        scheduled: true,
        timezone: 'Europe/Moscow'
      })
    );

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞ –Ω–æ–≤—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤)
    this.tasks.push(
      cron.schedule('0 */6 * * *', async () => {
        try {
          console.log('ü§ñ –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π...');
          
          // –ù–∞—Ö–æ–¥–∏–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —á–∞—Å–æ–≤
          const sixHoursAgo = new Date();
          sixHoursAgo.setHours(sixHoursAgo.getHours() - 6);

          const newEvents = await ClubEvents.findAll({
            where: {
              created_at: {
                [require('sequelize').Op.gte]: sixHoursAgo
              },
              auto_invite_enabled: true
            },
            include: [
              {
                model: ClubBots,
                as: 'club'
              }
            ]
          });

          for (const event of newEvents) {
            try {
              const result = await ClubBotService.sendAutoInvites(event.id);
              if (result.success) {
                console.log(`‚úÖ –ê–≤—Ç–æ-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è ${event.id}: ${result.invited_count} –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π`);
              } else {
                console.log(`‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è ${event.id}: ${result.message}`);
              }
            } catch (error) {
              console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è ${event.id}:`, error);
            }
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ cron-–∑–∞–¥–∞—á–∏ –∞–≤—Ç–æ-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π:', error);
        }
      }, {
        scheduled: true,
        timezone: 'Europe/Moscow'
      })
    );

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–ª—É–±–æ–≤ (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 2:00)
    this.tasks.push(
      cron.schedule('0 2 * * *', async () => {
        try {
          console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–ª—É–±–æ–≤...');
          
          const clubs = await ClubBots.findAll({
            attributes: ['club_id'],
            group: ['club_id']
          });

          for (const clubBot of clubs) {
            try {
              const result = await ClubBotService.updateClubStats(clubBot.club_id);
              if (result.success) {
                console.log(`‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –∫–ª—É–±–∞ ${clubBot.club_id}`);
              } else {
                console.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–ª—É–±–∞ ${clubBot.club_id}: ${result.message}`);
              }
            } catch (error) {
              console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª—É–±–∞ ${clubBot.club_id}:`, error);
            }
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ cron-–∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        }
      }, {
        scheduled: true,
        timezone: 'Europe/Moscow'
      })
    );

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –∫–ª—É–±–æ–≤ (–∫–∞–∂–¥—ã–µ 3 –¥–Ω—è –≤ 3:00)
    this.tasks.push(
      cron.schedule('0 3 */3 * *', async () => {
        try {
          console.log('üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –∫–ª—É–±–æ–≤...');
          
          const clubs = await ClubBots.findAll({
            where: {
              name: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞',
              is_active: true
            },
            attributes: ['club_id']
          });

          for (const clubBot of clubs) {
            try {
              const result = await ClubBotService.generateRecommendations(clubBot.club_id);
              if (result.success) {
                console.log(`‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –∫–ª—É–±–∞ ${clubBot.club_id}`);
              } else {
                console.log(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –∫–ª—É–±–∞ ${clubBot.club_id}: ${result.message}`);
              }
            } catch (error) {
              console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª—É–±–∞ ${clubBot.club_id}:`, error);
            }
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ cron-–∑–∞–¥–∞—á–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', error);
        }
      }, {
        scheduled: true,
        timezone: 'Europe/Moscow'
      })
    );

    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 4:00)
    this.tasks.push(
      cron.schedule('0 4 * * 0', async () => {
        try {
          console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–ª—É–±–æ–≤...');
          
          const result = await ClubBotService.cleanupOldData();
          if (result.success) {
            console.log(`‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ ${result.deleted_notifications} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`);
          } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', result.message);
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ cron-–∑–∞–¥–∞—á–∏ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        }
      }, {
        scheduled: true,
        timezone: 'Europe/Moscow'
      })
    );

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 1:00)
    this.tasks.push(
      cron.schedule('0 1 * * *', async () => {
        try {
          console.log('‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π...');
          
          const yesterday = new Date();
          yesterday.setDate(yesterday.getDate() - 1);

          const expiredEvents = await ClubEvents.findAll({
            where: {
              date: {
                [require('sequelize').Op.lt]: yesterday
              }
            }
          });

          console.log(`üìÖ –ù–∞–π–¥–µ–Ω–æ ${expiredEvents.length} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π`);
          
          // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
          // –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–æ–≤, –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ç.–¥.
          
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ cron-–∑–∞–¥–∞—á–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:', error);
        }
      }, {
        scheduled: true,
        timezone: 'Europe/Moscow'
      })
    );

    console.log('‚úÖ Cron-–∑–∞–¥–∞—á–∏ –¥–ª—è –∫–ª—É–±–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∑–∞–ø—É—â–µ–Ω—ã');
  }

  stop() {
    console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ cron-–∑–∞–¥–∞—á –¥–ª—è –∫–ª—É–±–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...');
    
    this.tasks.forEach(task => {
      task.stop();
    });
    
    this.tasks = [];
    console.log('‚úÖ Cron-–∑–∞–¥–∞—á–∏ –¥–ª—è –∫–ª—É–±–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  async runTask(taskName) {
    try {
      switch (taskName) {
        case 'reminders':
          console.log('üìÖ –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...');
          return await ClubBotService.sendEventReminders();
          
        case 'auto-invites':
          console.log('ü§ñ –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π...');
          // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
          const events = await ClubEvents.findAll({
            where: { auto_invite_enabled: true },
            limit: 5
          });
          
          const results = [];
          for (const event of events) {
            const result = await ClubBotService.sendAutoInvites(event.id);
            results.push({ event_id: event.id, result });
          }
          return results;
          
        case 'stats':
          console.log('üìä –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
          const clubs = await ClubBots.findAll({
            attributes: ['club_id'],
            group: ['club_id'],
            limit: 3
          });
          
          const statsResults = [];
          for (const clubBot of clubs) {
            const result = await ClubBotService.updateClubStats(clubBot.club_id);
            statsResults.push({ club_id: clubBot.club_id, result });
          }
          return statsResults;
          
        case 'recommendations':
          console.log('üéØ –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...');
          const analyticsClubs = await ClubBots.findAll({
            where: { name: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞' },
            limit: 3
          });
          
          const recResults = [];
          for (const clubBot of analyticsClubs) {
            const result = await ClubBotService.generateRecommendations(clubBot.club_id);
            recResults.push({ club_id: clubBot.club_id, result });
          }
          return recResults;
          
        case 'cleanup':
          console.log('üßπ –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö...');
          return await ClubBotService.cleanupOldData();
          
        default:
          throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞: ${taskName}`);
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ ${taskName}:`, error);
      throw error;
    }
  }
}

module.exports = ClubCron;
