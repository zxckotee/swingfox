const cron = require('node-cron');
const SubscriptionManager = require('../services/SubscriptionManager');
const { APILogger } = require('../utils/logger');

class SubscriptionCron {
  constructor() {
    this.logger = new APILogger('SUBSCRIPTION_CRON');
    this.subscriptionManager = new SubscriptionManager();
  }

  // –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ –≤ 00:00
  startDailyTask() {
    cron.schedule('0 0 * * *', async () => {
      console.log('üïê [SUBSCRIPTION_CRON] –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫');
      
      try {
        const result = await this.subscriptionManager.processDailySubscriptions();
        console.log('‚úÖ [SUBSCRIPTION_CRON] –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ', result);
      } catch (error) {
        console.error('‚ùå [SUBSCRIPTION_CRON] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏:', error);
      }
    }, {
      scheduled: true,
      timezone: "Europe/Moscow"
    });

    console.log('‚úÖ [SUBSCRIPTION_CRON] –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 00:00');
  }

  // –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏–π
  startCriticalCheckTask() {
    cron.schedule('0 */6 * * *', async () => {
      console.log('üîç [SUBSCRIPTION_CRON] –ó–∞–ø—É—Å–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫');
      
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–æ–º —Å—Ä–µ–¥—Å—Ç–≤
        await this.subscriptionManager.checkLowBalanceSubscriptions();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–∞—é—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è
        await this.subscriptionManager.notifyExpiringSubscriptions();
        
        console.log('‚úÖ [SUBSCRIPTION_CRON] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      } catch (error) {
        console.error('‚ùå [SUBSCRIPTION_CRON] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ:', error);
      }
    }, {
      scheduled: true,
      timezone: "Europe/Moscow"
    });

    console.log('‚úÖ [SUBSCRIPTION_CRON] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤');
  }

  // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á
  start() {
    this.startDailyTask();
    this.startCriticalCheckTask();
    console.log('‚úÖ [SUBSCRIPTION_CRON] –í—Å–µ cron-–∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω—ã');
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á
  stop() {
    cron.getTasks().forEach(task => task.stop());
    console.log('‚úÖ [SUBSCRIPTION_CRON] –í—Å–µ cron-–∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
  }
}

module.exports = SubscriptionCron;
