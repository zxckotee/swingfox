const { DataTypes } = require('sequelize');
const { sequelize } = require('../config/database');

const ClubBot = sequelize.define('ClubBot', {
  id: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true
  },
  
  club_id: {
    type: DataTypes.INTEGER,
    allowNull: false,
    references: {
      model: 'clubs',
      key: 'id'
    },
    onUpdate: 'CASCADE',
    onDelete: 'CASCADE',
    comment: 'ID –∫–ª—É–±–∞'
  },
  
  welcome_message: {
    type: DataTypes.TEXT,
    allowNull: true,
    comment: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
  },
  
  invitation_message: {
    type: DataTypes.TEXT,
    allowNull: true,
    comment: '–°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∫–ª—É–±'
  },
  
  thanks_message: {
    type: DataTypes.TEXT,
    allowNull: true,
    comment: '–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∑–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–ª—É–±'
  },
  
  event_info_template: {
    type: DataTypes.TEXT,
    allowNull: true,
    comment: '–®–∞–±–ª–æ–Ω –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏'
  },
  
  auto_responses: {
    type: DataTypes.JSON,
    allowNull: true,
    comment: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞'
  },
  
  is_active: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true,
    comment: '–ê–∫—Ç–∏–≤–µ–Ω –ª–∏ –±–æ—Ç'
  },
  
  // –ù–û–í–´–ï –ü–û–õ–Ø –î–õ–Ø –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–• –¢–†–ò–ì–ì–ï–†–û–í –ò –ü–ï–†–°–û–ù–ê–õ–ò–ó–ê–¶–ò–ò
  personality_traits: {
    type: DataTypes.JSON,
    allowNull: true,
    comment: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ "—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞" –±–æ—Ç–∞ (–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –∏–≥—Ä–∏–≤—ã–π)'
  },
  
  event_scenarios: {
    type: DataTypes.JSON,
    allowNull: true,
    comment: '–°—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π'
  },
  
  ice_breakers: {
    type: DataTypes.JSON,
    allowNull: true,
    comment: '–¢–µ–º—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏ "–ª–µ–¥–æ–∫–æ–ª—ã"'
  },
  
  compatibility_algorithms: {
    type: DataTypes.JSON,
    allowNull: true,
    comment: '–ê–ª–≥–æ—Ä–∏—Ç–º—ã –ø–æ–¥–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏'
  },
  
  emotional_triggers: {
    type: DataTypes.JSON,
    allowNull: true,
    comment: '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –≤–æ–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
  },
  
  referral_messages: {
    type: DataTypes.JSON,
    allowNull: true,
    comment: '–°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã'
  },
  
  created_at: {
    type: DataTypes.DATE,
    allowNull: false,
    defaultValue: DataTypes.NOW,
    comment: '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'
  },
  
  updated_at: {
    type: DataTypes.DATE,
    allowNull: false,
    defaultValue: DataTypes.NOW,
    comment: '–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'
  }
}, {
  tableName: 'club_bots',
  timestamps: true,
  createdAt: 'created_at',
  updatedAt: 'updated_at',
  indexes: [
    {
      fields: ['club_id']
    },
    {
      fields: ['is_active']
    },
    {
      fields: ['club_id', 'is_active']
    }
  ]
});

// –ú–µ—Ç–æ–¥—ã —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
ClubBot.prototype.isActive = function() {
  return this.is_active === true;
};

ClubBot.prototype.getWelcomeMessage = function(userName = '') {
  if (!this.welcome_message) {
    return `–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –∫–ª—É–±! üéâ`;
  }
  
  return this.welcome_message.replace('{userName}', userName);
};

ClubBot.prototype.getInvitationMessage = function(eventTitle = '') {
  if (!this.invitation_message) {
    return `–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞—à–µ–º—É –∫–ª—É–±—É! –£ –Ω–∞—Å –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π! üöÄ`;
  }
  
  return this.invitation_message.replace('{eventTitle}', eventTitle);
};

ClubBot.prototype.getThanksMessage = function() {
  return this.thanks_message || '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–ª—É–±! –ú—ã —Ä–∞–¥—ã —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! üéä';
};

ClubBot.prototype.getEventInfoTemplate = function(eventData = {}) {
  if (!this.event_info_template) {
    return `üìÖ {title}\nüìç {location}\nüïê {date}\nüí∞ {price}`;
  }
  
  let template = this.event_info_template;
  Object.keys(eventData).forEach(key => {
    template = template.replace(`{${key}}`, eventData[key] || '');
  });
  
  return template;
};

ClubBot.prototype.getAutoResponse = function(keyword) {
  if (!this.auto_responses || !this.auto_responses[keyword]) {
    return null;
  }
  
  return this.auto_responses[keyword];
};

// –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–• –¢–†–ò–ì–ì–ï–†–û–í
ClubBot.prototype.getPersonalityTrait = function(trait) {
  if (!this.personality_traits || !this.personality_traits[trait]) {
    return 'friendly'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π
  }
  
  return this.personality_traits[trait];
};

ClubBot.prototype.getEventScenario = function(eventType) {
  if (!this.event_scenarios || !this.event_scenarios[eventType]) {
    return null;
  }
  
  return this.event_scenarios[eventType];
};

ClubBot.prototype.getIceBreakerTopic = function(category = 'general') {
  if (!this.ice_breakers || !this.ice_breakers[category]) {
    return '–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ! üòä';
  }
  
  const topics = this.ice_breakers[category];
  if (Array.isArray(topics)) {
    return topics[Math.floor(Math.random() * topics.length)];
  }
  
  return topics;
};

ClubBot.prototype.getCompatibilityAlgorithm = function(algorithmName) {
  if (!this.compatibility_algorithms || !this.compatibility_algorithms[algorithmName]) {
    return null;
  }
  
  return this.compatibility_algorithms[algorithmName];
};

ClubBot.prototype.getEmotionalTrigger = function(triggerType) {
  if (!this.emotional_triggers || !this.emotional_triggers[triggerType]) {
    return null;
  }
  
  return this.emotional_triggers[triggerType];
};

ClubBot.prototype.getReferralMessage = function(messageType) {
  if (!this.referral_messages || !this.referral_messages[messageType]) {
    return '–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏ –±–æ–Ω—É—Å! üéÅ';
  }
  
  return this.referral_messages[messageType];
};

// –ú–µ—Ç–æ–¥—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
ClubBot.prototype.setPersonality = function(traits) {
  this.personality_traits = { ...this.personality_traits, ...traits };
  return this.save();
};

ClubBot.prototype.addEventScenario = function(eventType, scenario) {
  if (!this.event_scenarios) {
    this.event_scenarios = {};
  }
  
  this.event_scenarios[eventType] = scenario;
  return this.save();
};

ClubBot.prototype.addIceBreaker = function(category, topics) {
  if (!this.ice_breakers) {
    this.ice_breakers = {};
  }
  
  if (Array.isArray(topics)) {
    this.ice_breakers[category] = topics;
  } else {
    if (!this.ice_breakers[category]) {
      this.ice_breakers[category] = [];
    }
    this.ice_breakers[category].push(topics);
  }
  
  return this.save();
};

ClubBot.prototype.setCompatibilityAlgorithm = function(name, algorithm) {
  if (!this.compatibility_algorithms) {
    this.compatibility_algorithms = {};
  }
  
  this.compatibility_algorithms[name] = algorithm;
  return this.save();
};

ClubBot.prototype.addEmotionalTrigger = function(triggerType, trigger) {
  if (!this.emotional_triggers) {
    this.emotional_triggers = {};
  }
  
  this.emotional_triggers[triggerType] = trigger;
  return this.save();
};

ClubBot.prototype.setReferralMessage = function(messageType, message) {
  if (!this.referral_messages) {
    this.referral_messages = {};
  }
  
  this.referral_messages[messageType] = message;
  return this.save();
};

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã
ClubBot.getActiveBots = async function(options = {}) {
  const {
    limit = 20,
    offset = 0,
    club_id = null
  } = options;

  const whereClause = { is_active: true };
  
  if (club_id) {
    whereClause.club_id = club_id;
  }

  try {
    const bots = await this.findAll({
      where: whereClause,
      include: [
        {
          model: sequelize.models.Clubs,
          as: 'Club',
          attributes: ['id', 'name', 'type', 'avatar']
        }
      ],
      order: [['created_at', 'DESC']],
      limit,
      offset
    });

    return bots;
  } catch (error) {
    console.error('Error getting active bots:', error);
    throw error;
  }
};

ClubBot.getBotByClub = async function(clubId) {
  try {
    return await this.findOne({
      where: { club_id: clubId },
      include: [
        {
          model: sequelize.models.Clubs,
          as: 'Club',
          attributes: ['id', 'name', 'type', 'avatar']
        }
      ]
    });
  } catch (error) {
    console.error('Error getting bot by club:', error);
    throw error;
  }
};

// Hooks
ClubBot.beforeCreate(async (bot) => {
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π
  if (!bot.personality_traits) {
    bot.personality_traits = {
      tone: 'friendly',
      formality: 'casual',
      humor: 'light'
    };
  }
  
  if (!bot.event_scenarios) {
    bot.event_scenarios = {
      party: '–í–µ—á–µ—Ä–∏–Ω–∫–∞ –≤ —Ä–∞–∑–≥–∞—Ä–µ! üéâ',
      dinner: '–£—é—Ç–Ω—ã–π —É–∂–∏–Ω –≤ –ø—Ä–∏—è—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ üçΩÔ∏è',
      activity: '–ê–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è–ø—Ä–µ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ! üèÉ‚Äç‚ôÇÔ∏è',
      networking: '–û—Ç–ª–∏—á–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥–∞! ü§ù'
    };
  }
  
  if (!bot.ice_breakers) {
    bot.ice_breakers = {
      general: [
        '–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ! üòä',
        '–ß—Ç–æ —Ç–µ–±—è –ø—Ä–∏–≤–µ–ª–æ –≤ –Ω–∞—à –∫–ª—É–±? ü§î',
        '–ö–∞–∫–∏–µ —É —Ç–µ–±—è –ø–ª–∞–Ω—ã –Ω–∞ –≤–µ—á–µ—Ä? üåô'
      ]
    };
  }
  
  if (!bot.emotional_triggers) {
    bot.emotional_triggers = {
      excitement: 'üî•',
      curiosity: 'ü§î',
      joy: 'üòä',
      surprise: 'üò≤'
    };
  }
  
  if (!bot.referral_messages) {
    bot.referral_messages = {
      invitation: '–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏ –±–æ–Ω—É—Å! üéÅ',
      success: '–û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ–π –¥—Ä—É–≥ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è! üéâ',
      reminder: '–ù–µ –∑–∞–±—É–¥—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π! üë•'
    };
  }
});

// –ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏
ClubBot.associate = function(models) {
  // –ë–æ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫–ª—É–±—É
  ClubBot.belongsTo(models.Clubs, {
    foreignKey: 'club_id',
    targetKey: 'id',
    as: 'Club'
  });
};

module.exports = ClubBot;
