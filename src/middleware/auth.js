const jwt = require('jsonwebtoken');
const { User } = require('../models');

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT —Ç–æ–∫–µ–Ω–∞
const authenticateToken = async (req, res, next) => {
  try {
    console.log('üîç authenticateToken middleware - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω');
    console.log('üîç URL:', req.url);
    console.log('üîç Method:', req.method);
    console.log('üîç Headers:', Object.keys(req.headers));
    
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN

    console.log('üîç Auth header:', authHeader);
    console.log('üîç Token:', token ? 'present' : 'missing');

    if (!token) {
      console.log('–û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω');
      return res.status(401).json({ 
        error: 'no_token',
        message: '–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' 
      });
    }

    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–∫ —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try {
      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      console.log('üîç Token decoded as user:', { userId: decoded.userId });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Ç–æ–∫–µ–Ω –∞–∫—Ç—É–∞–ª–µ–Ω
      const user = await User.findOne({
        where: { 
          id: decoded.userId,
          auth_token: token 
        }
      });

      console.log('üîç User found:', user ? 'yes' : 'no');

      if (user) {
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ req
        req.user = {
          id: user.id,
          login: user.login,
          email: user.email,
          viptype: user.viptype
        };

        console.log('üîç User authenticated:', req.user.login);
        return next();
      }
    } catch (userTokenError) {
      console.log('üîç Token is not a valid user token, trying club token...');
    }

    // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π, –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–∫ —Ç–æ–∫–µ–Ω –∫–ª—É–±–∞
    try {
      const decoded = jwt.verify(token, process.env.CLUB_JWT_SECRET || 'club_secret_key');
      console.log('üîç Token decoded as club:', { clubId: decoded.clubId });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª—É–± —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∞–∫—Ç–∏–≤–µ–Ω
      const { Clubs } = require('../models');
      const club = await Clubs.findOne({
        where: { 
          id: decoded.clubId,
          is_active: true 
        }
      });

      console.log('üîç Club found:', club ? 'yes' : 'no');

      if (club) {
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—É–±–µ –≤ req
        req.club = {
          id: club.id,
          name: club.name,
          login: club.login,
          type: club.type
        };

        console.log('üîç Club authenticated:', req.club.name);
        return next();
      }
    } catch (clubTokenError) {
      console.log('üîç Token is not a valid club token either');
    }

    // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –Ω–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∏ –¥–ª—è –∫–ª—É–±–∞
    console.log('üîç –û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –Ω–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∏ –¥–ª—è –∫–ª—É–±–∞');
    return res.status(403).json({ 
      error: 'invalid_token',
      message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' 
    });
  } catch (error) {
    console.error('Auth middleware error:', error);
    
    if (error.name === 'TokenExpiredError') {
      return res.status(403).json({ 
        error: 'token_expired',
        message: '–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫' 
      });
    }
    
    return res.status(403).json({ 
      error: 'invalid_token',
      message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' 
    });
  }
};

// Middleware –¥–ª—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–æ—É—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∏ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞)
const optionalAuth = async (req, res, next) => {
  try {
    console.log('optionalAuth middleware - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)');
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];

    console.log('Auth header:', authHeader);
    console.log('Token:', token ? 'present' : 'missing');

    if (!token) {
      console.log('–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
      req.user = null;
      return next();
    }

    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–∫ —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try {
      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      console.log('üîç Token decoded as user:', { userId: decoded.userId });
      
      const user = await User.findOne({
        where: { 
          id: decoded.userId,
          auth_token: token 
        }
      });

      console.log('üîç User found:', user ? 'yes' : 'no');

      if (user) {
        req.user = {
          id: user.id,
          login: user.login,
          email: user.email,
          viptype: user.viptype
        };
        console.log('üîç User authenticated:', req.user.login);
        return next();
      }
    } catch (userTokenError) {
      console.log('üîç Token is not a valid user token, trying club token...');
    }

    // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π, –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–∫ —Ç–æ–∫–µ–Ω –∫–ª—É–±–∞
    try {
      const decoded = jwt.verify(token, process.env.CLUB_JWT_SECRET || 'club_secret_key');
      console.log('üîç Token decoded as club:', { clubId: decoded.clubId });
      
      const { Clubs } = require('../models');
      const club = await Clubs.findOne({
        where: { 
          id: decoded.clubId,
          is_active: true 
        }
      });

      console.log('üîç Club found:', club ? 'yes' : 'no');

      if (club) {
        req.club = {
          id: club.id,
          name: club.name,
          login: club.login,
          type: club.type
        };
        console.log('üîç Club authenticated:', req.club.name);
        return next();
      }
    } catch (clubTokenError) {
      console.log('üîç Token is not a valid club token either');
    }

    // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –Ω–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∏ –¥–ª—è –∫–ª—É–±–∞
    req.user = null;
    req.club = null;
    console.log('üîç –ù–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–∏ –∫–ª—É–± –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã');

    next();
  } catch (error) {
    console.error('Optional auth middleware error:', error);
    req.user = null;
    next();
  }
};

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ VIP —Å—Ç–∞—Ç—É—Å–∞
const requireVip = (req, res, next) => {
  if (!req.user) {
    return res.status(401).json({ 
      error: 'no_session',
      message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' 
    });
  }

  if (req.user.viptype === 'FREE') {
    return res.status(403).json({ 
      error: 'no_root',
      message: '–¢—Ä–µ–±—É–µ—Ç—Å—è VIP –∏–ª–∏ PREMIUM –ø–æ–¥–ø–∏—Å–∫–∞' 
    });
  }

  next();
};

module.exports = {
  authenticateToken,
  optionalAuth,
  requireVip
};