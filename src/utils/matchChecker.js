const { Likes } = require('../models');
const { APILogger } = require('./logger');

/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º—ç—Ç—á–µ–π –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ —á–∞—Ç
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —á–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –≤–∑–∞–∏–º–Ω—ã—Ö –ª–∞–π–∫–æ–≤
 */
class MatchChecker {
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
   * @param {string} user1 - –ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
   * @param {string} user2 - –í—Ç–æ—Ä–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –º—ç—Ç—á–∞
   */
  static async checkMutualLike(user1, user2) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∞–π–∫ –æ—Ç user1 –∫ user2
      const like1to2 = await Likes.findOne({
        where: {
          like_from: user1,
          like_to: user2
        }
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∞–π–∫ –æ—Ç user2 –∫ user1  
      const like2to1 = await Likes.findOne({
        where: {
          like_from: user2,
          like_to: user1
        }
      });

      const hasMatch = !!(like1to2 && like2to1);

      console.log('Match check completed:', {
        user1,
        user2,
        hasMatch,
        like1to2: !!like1to2,
        like2to1: !!like2to1
      });

      return {
        hasMatch,
        like1to2: !!like1to2,
        like2to1: !!like2to1,
        canChat: hasMatch,
        reason: hasMatch ? 'mutual_like' : 'no_match'
      };

    } catch (error) {
      console.error('Error checking mutual like:', {
        user1,
        user2,
        error: error.message
      });

      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ë–î - —Ä–∞–∑—Ä–µ—à–∞–µ–º —á–∞—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      return {
        hasMatch: true,
        like1to2: false,
        like2to1: false,
        canChat: true,
        reason: 'db_error_fallback'
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {string} fromUser - –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å
   * @param {string} toUser - –ü–æ–ª—É—á–∞—Ç–µ–ª—å
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
   */
  static async canSendMessage(fromUser, toUser) {
    try {
      // –ó–∞–ø—Ä–µ—â–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–∞–º–æ–º—É —Å–µ–±–µ
      if (fromUser === toUser) {
        return {
          allowed: false,
          reason: 'self_message',
          message: '–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å–∞–º–æ–º—É —Å–µ–±–µ'
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º—ç—Ç—á
      const matchResult = await this.checkMutualLike(fromUser, toUser);

      if (!matchResult.canChat) {
        return {
          allowed: false,
          reason: 'no_match',
          message: '–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω—É–∂–µ–Ω –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫',
          matchData: matchResult
        };
      }

      return {
        allowed: true,
        reason: matchResult.reason,
        message: '–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞',
        matchData: matchResult
      };

    } catch (error) {
      console.error('Error checking send permission:', {
        fromUser,
        toUser,
        error: error.message
      });

      // Fallback: —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      return {
        allowed: true,
        reason: 'fallback_allow',
        message: '–†–∞–∑—Ä–µ—à–µ–Ω–æ (fallback)',
        error: error.message
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —á–∞—Ç–∞
   * @param {string} currentUser - –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
   * @param {string} chatPartner - –°–æ–±–µ—Å–µ–¥–Ω–∏–∫
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
   */
  static async canViewChat(currentUser, chatPartner) {
    try {
      // –†–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —á–∞—Ç–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      const matchResult = await this.checkMutualLike(currentUser, chatPartner);

      return {
        allowed: true, // –í—Å–µ–≥–¥–∞ —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä
        hasMatch: matchResult.hasMatch,
        canReply: matchResult.canChat,
        reason: 'view_allowed',
        matchData: matchResult
      };

    } catch (error) {
      console.error('Error checking view permission:', {
        currentUser,
        chatPartner,
        error: error.message
      });

      return {
        allowed: true,
        hasMatch: false,
        canReply: true, // Fallback
        reason: 'fallback_allow'
      };
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –º—ç—Ç—á –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –ø—Ä–∏ –≤–∑–∞–∏–º–Ω–æ–º –ª–∞–π–∫–µ
   * @param {string} user1 - –ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
   * @param {string} user2 - –í—Ç–æ—Ä–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º—ç—Ç—á–∞
   */
  static async createMatch(user1, user2) {
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–∑–∞–∏–º–Ω–æ—Å—Ç–∏ –≤ –∑–∞–ø–∏—Å—è—Ö –ª–∞–π–∫–æ–≤
      await Likes.update(
        { reciprocal: 'mutual' },
        {
          where: {
            like_from: user1,
            like_to: user2
          }
        }
      );

      await Likes.update(
        { reciprocal: 'mutual' },
        {
          where: {
            like_from: user2,
            like_to: user1
          }
        }
      );

      console.log('Match created successfully:', {
        user1,
        user2
      });

      return {
        success: true,
        message: '–ú—ç—Ç—á —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ'
      };

    } catch (error) {
      console.error('Error creating match:', {
        user1,
        user2,
        error: error.message
      });

      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –º—ç—Ç—á–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI
   * @param {string} currentUser - –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
   * @param {string} targetUser - –¶–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
   * @returns {Promise<Object>} –°—Ç–∞—Ç—É—Å –º—ç—Ç—á–∞ –¥–ª—è UI
   */
  static async getMatchStatus(currentUser, targetUser) {
    try {
      const matchResult = await this.checkMutualLike(currentUser, targetUser);

      if (matchResult.hasMatch) {
        return {
          status: 'matched',
          canChat: true,
          icon: 'üíï',
          message: '–£ –≤–∞—Å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è!'
        };
      }

      if (matchResult.like1to2 && !matchResult.like2to1) {
        return {
          status: 'waiting',
          canChat: false,
          icon: 'üí≠',
          message: '–û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–≥–æ –ª–∞–π–∫–∞'
        };
      }

      if (!matchResult.like1to2 && matchResult.like2to1) {
        return {
          status: 'incoming',
          canChat: false,
          icon: '‚ù§Ô∏è',
          message: '–í–∞–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç—Å—è! –õ–∞–π–∫–Ω–∏—Ç–µ –≤ –æ—Ç–≤–µ—Ç'
        };
      }

      return {
        status: 'no_match',
        canChat: false,
        icon: 'üëã',
        message: '–ü–æ—Å—Ç–∞–≤—å—Ç–µ –ª–∞–π–∫ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞'
      };

    } catch (error) {
      console.error('Error getting match status:', {
        currentUser,
        targetUser,
        error: error.message
      });

      return {
        status: 'unknown',
        canChat: true, // Fallback
        icon: 'üí¨',
        message: '–î–æ—Å—Ç—É–ø–Ω–æ –æ–±—â–µ–Ω–∏–µ'
      };
    }
  }
}

module.exports = MatchChecker;