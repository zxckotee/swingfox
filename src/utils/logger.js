
// –£—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const LOG_LEVELS = {
  ERROR: 0,
  WARN: 1,
  INFO: 2,
  DEBUG: 3,
  TRACE: 4
};

// –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥)
let CURRENT_LOG_LEVEL = LOG_LEVELS.DEBUG;
let MAX_ARRAY_SIZE = 10;
let TRUNCATE_LARGE_DATA = true;

// –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
try {
  const config = require('../../config/config.json');
  const env = process.env.NODE_ENV || 'development';
  const loggingConfig = config[env]?.logging_config;
  
  if (loggingConfig) {
    if (loggingConfig.level && LOG_LEVELS[loggingConfig.level.toUpperCase()] !== undefined) {
      CURRENT_LOG_LEVEL = LOG_LEVELS[loggingConfig.level.toUpperCase()];
    }
    if (loggingConfig.max_array_size !== undefined) {
      MAX_ARRAY_SIZE = loggingConfig.max_array_size;
    }
    if (loggingConfig.truncate_large_data !== undefined) {
      TRUNCATE_LARGE_DATA = loggingConfig.truncate_large_data;
    }
  }
} catch (error) {
  // –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  console.log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
}

// –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (process.env.LOG_LEVEL && LOG_LEVELS[process.env.LOG_LEVEL.toUpperCase()] !== undefined) {
  CURRENT_LOG_LEVEL = LOG_LEVELS[process.env.LOG_LEVEL.toUpperCase()];
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const formatTimestamp = () => {
  return new Date().toISOString();
};

const formatUserId = (req) => {
  return req.user?.login || req.user?.id || 'anonymous';
};

const formatIP = (req) => {
  return req.ip || req.connection?.remoteAddress || 'unknown';
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (—É–¥–∞–ª—è–µ—Ç –ø–∞—Ä–æ–ª–∏, —Ç–æ–∫–µ–Ω—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–æ–≤)
const sanitizeData = (data) => {
  if (!data || typeof data !== 'object') return data;
  
  const sanitized = { ...data };
  const sensitiveFields = ['password', 'auth_token', 'token', 'mail_code', 'images_password'];
  
  // –£–¥–∞–ª—è–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
  sensitiveFields.forEach(field => {
    if (sanitized[field]) {
      sanitized[field] = '[HIDDEN]';
    }
  });
  
  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–æ–≤ –≤ data –ø–æ–ª–µ
  if (sanitized.data && Array.isArray(sanitized.data)) {
    if (sanitized.data.length > MAX_ARRAY_SIZE) {
      sanitized.data = `[Array with ${sanitized.data.length} items - truncated for logging]`;
    }
  }
  
  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥—Ä—É–≥–∏—Ö –º–∞—Å—Å–∏–≤–æ–≤
  Object.keys(sanitized).forEach(key => {
    if (Array.isArray(sanitized[key]) && sanitized[key].length > MAX_ARRAY_SIZE) {
      sanitized[key] = `[Array with ${sanitized[key].length} items - truncated for logging]`;
    }
  });
  
  return sanitized;
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const log = (level, message, data = null, req = null) => {
  if (LOG_LEVELS[level] > CURRENT_LOG_LEVEL) return;
  
  const timestamp = formatTimestamp();
  const userId = req ? formatUserId(req) : null;
  const ip = req ? formatIP(req) : null;
  const sanitizedData = data ? sanitizeData(data) : null;
    
  let levelPrefix;
  switch (level) {
    case 'ERROR':
      levelPrefix = '[ERROR]';
      break;
    case 'WARN':
      levelPrefix = '[WARN] ';
      break;
    case 'INFO':
      levelPrefix = '[INFO] ';
      break;
    case 'DEBUG':
      levelPrefix = '[DEBUG]';
      break;
    case 'TRACE':
      levelPrefix = '[TRACE]';
      break;
    default:
      levelPrefix = '[LOG]  ';
  }
  
  let logMessage = `${timestamp} ${levelPrefix} ${message}`;
  
  if (userId) logMessage += ` | User: ${userId}`;
  if (ip) logMessage += ` | IP: ${ip}`;
  
  console.log(logMessage);
  
  if (sanitizedData) {
    console.log('üìÑ Data:', JSON.stringify(sanitizedData, null, 2));
  }
};

// API-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
class APILogger {
  constructor(routeName) {
    this.routeName = routeName;
    this.requestId = null;
  }
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  logRequest(req, endpoint) {
    this.requestId = Date.now() + Math.random().toString(36).substr(2, 9);
    
    log('INFO', `üöÄ [${this.routeName}] ${endpoint} - REQUEST START`, {
      method: req.method,
      url: req.originalUrl,
      headers: sanitizeData(req.headers),
      body: sanitizeData(req.body),
      query: req.query,
      params: req.params,
      requestId: this.requestId
    }, req);
  }
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–∏—Å–∫–∞/—Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  logProcess(message, data, req = null) {
    log('DEBUG', `üîç [${this.routeName}] ${message}`, {
      ...sanitizeData(data),
      requestId: this.requestId
    }, req);
  }
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
  logDatabase(operation, table, data, req = null) {
    log('DEBUG', `üíæ [${this.routeName}] DB ${operation} - ${table}`, {
      operation,
      table,
      data: sanitizeData(data),
      requestId: this.requestId
    }, req);
  }
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–π –∏ –ø—Ä–æ–≤–µ—Ä–æ–∫
  logComparison(description, expected, actual, result, req = null) {
    log('TRACE', `‚öñÔ∏è [${this.routeName}] COMPARISON: ${description}`, {
      expected: sanitizeData(expected),
      actual: sanitizeData(actual),
      result,
      match: expected === actual,
      requestId: this.requestId
    }, req);
  }
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  logValidation(field, value, rules, isValid, req = null) {
    log('TRACE', `‚úÖ [${this.routeName}] VALIDATION: ${field}`, {
      field,
      value: sanitizeData({ [field]: value })[field],
      rules,
      isValid,
      requestId: this.requestId
    }, req);
  }
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
  logSuccess(req, statusCode, responseData) {
    log('INFO', `‚úÖ [${this.routeName}] REQUEST SUCCESS`, {
      statusCode,
      responseData: sanitizeData(responseData),
      requestId: this.requestId
    }, req);
  }
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
  logError(req, error, statusCode = 500) {
    log('ERROR', `‚ùå [${this.routeName}] REQUEST ERROR`, {
      error: error.message,
      stack: error.stack,
      statusCode,
      requestId: this.requestId
    }, req);
  }
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
  logWarning(message, data, req = null) {
    log('WARN', `‚ö†Ô∏è [${this.routeName}] ${message}`, {
      ...sanitizeData(data),
      requestId: this.requestId
    }, req);
  }
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
  logBusinessLogic(step, description, data, req = null) {
    log('DEBUG', `üßÆ [${this.routeName}] STEP ${step}: ${description}`, {
      step,
      data: sanitizeData(data),
      requestId: this.requestId
    }, req);
  }
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
  logResult(operation, success, data, req = null) {
    const emoji = success ? '‚úÖ' : '‚ùå';
    const level = success ? 'INFO' : 'WARN';
    
    log(level, `${emoji} [${this.routeName}] RESULT: ${operation}`, {
      operation,
      success,
      data: sanitizeData(data),
      requestId: this.requestId
    }, req);
  }
}

// Middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
const loggerMiddleware = (routeName) => {
  return (req, res, next) => {
    const logger = new APILogger(routeName);
    req.apiLogger = logger;
    
    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å
    logger.logRequest(req, `${req.method} ${req.route?.path || req.path}`);
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    const originalSend = res.send;
    res.send = function(data) {
      try {
        const responseData = typeof data === 'string' ? JSON.parse(data) : data;
        logger.logSuccess(req, res.statusCode, responseData);
      } catch (e) {
        logger.logSuccess(req, res.statusCode, { response: 'non-json data' });
      }
      originalSend.call(this, data);
    };
    
    next();
  };
};

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
module.exports = {
  APILogger,
  loggerMiddleware,
  log,
  LOG_LEVELS,
  sanitizeData,
  CURRENT_LOG_LEVEL,
  MAX_ARRAY_SIZE,
  TRUNCATE_LARGE_DATA
};