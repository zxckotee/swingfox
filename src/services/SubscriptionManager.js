const { Subscriptions, User, SubscriptionPlans, Notifications } = require('../models');
const { APILogger } = require('../utils/logger');

class SubscriptionManager {
  constructor() {
    this.logger = new APILogger('SUBSCRIPTION_MANAGER');
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
  async processDailySubscriptions() {
    console.log('üîÑ [SUBSCRIPTION_MANAGER] –ù–∞—á–∏–Ω–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ–¥–ø–∏—Å–æ–∫');
    
    try {
      // 1. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ
      const autoRenewalCount = await this.processAutoRenewals();
      
      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
      const expiredCount = await this.processExpiredSubscriptions();
      
      // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–∞—é—Ç —á–µ—Ä–µ–∑ 3 –¥–Ω—è
      const expiringSoonCount = await this.notifyExpiringSubscriptions();
      
      // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–æ–º —Å—Ä–µ–¥—Å—Ç–≤
      const lowBalanceCount = await this.checkLowBalanceSubscriptions();
      
      console.log('‚úÖ [SUBSCRIPTION_MANAGER] –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', {
        auto_renewals: autoRenewalCount,
        expired: expiredCount,
        expiring_soon: expiringSoonCount,
        low_balance: lowBalanceCount
      });

      return {
        auto_renewals: autoRenewalCount,
        expired: expiredCount,
        expiring_soon: expiringSoonCount,
        low_balance: lowBalanceCount
      };

    } catch (error) {
      console.error('‚ùå [SUBSCRIPTION_MANAGER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫:', error);
      throw error;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è
  async processAutoRenewals() {
    try {
      return await Subscriptions.processAutoRenewal();
    } catch (error) {
      console.error('‚ùå [SUBSCRIPTION_MANAGER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
  async processExpiredSubscriptions() {
    try {
      const expiredSubscriptions = await Subscriptions.findAll({
        where: {
          status: 'active',
          end_date: {
            [Subscriptions.sequelize.Sequelize.Op.lt]: new Date()
          }
        },
        include: [{
          model: User,
          as: 'User',
          attributes: ['login', 'viptype']
        }]
      });

      let processedCount = 0;

      for (const subscription of expiredSubscriptions) {
        try {
                  // –ï—Å–ª–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª), —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        if (!subscription.auto_renewal) {
          await subscription.expire();
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
          await Notifications.create({
            user_id: subscription.user_id,
            type: 'subscription_expired',
            title: '–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞',
            message: `–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ ${subscription.subscription_type} –∏—Å—Ç–µ–∫–ª–∞.`,
            data: {
              subscription_id: subscription.id,
              subscription_type: subscription.subscription_type
            }
          });
          
          processedCount++;
        } else {
          // –ï—Å–ª–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é), –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
          try {
            await this.autoRenewSubscription(subscription);
            processedCount++;
          } catch (renewError) {
            console.error(`‚ùå [SUBSCRIPTION_MANAGER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ ${subscription.id}:`, renewError);
            
            // –ï—Å–ª–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –∏—Å—Ç–µ–∫–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            await subscription.expire();
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è
            await Notifications.create({
              user_id: subscription.user_id,
              type: 'subscription_auto_renewal_failed',
              title: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è',
              message: `–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ${subscription.subscription_type}. –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞.`,
              data: {
                subscription_id: subscription.id,
                subscription_type: subscription.subscription_type
              }
            });
          }
        }
        } catch (error) {
          console.error(`‚ùå [SUBSCRIPTION_MANAGER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ ${subscription.id}:`, error);
        }
      }

      return processedCount;

    } catch (error) {
      console.error('‚ùå [SUBSCRIPTION_MANAGER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫:', error);
      throw error;
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
  async notifyExpiringSubscriptions() {
    try {
      const threeDaysFromNow = new Date();
      threeDaysFromNow.setDate(threeDaysFromNow.getDate() + 3);

      const expiringSubscriptions = await Subscriptions.findAll({
        where: {
          status: 'active',
          end_date: {
            [Subscriptions.sequelize.Sequelize.Op.between]: [new Date(), threeDaysFromNow]
          }
        },
        include: [{
          model: User,
          as: 'User',
          attributes: ['login', 'balance']
        }]
      });

      let notifiedCount = 0;

      for (const subscription of expiringSubscriptions) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
          const existingNotification = await Notifications.findOne({
            where: {
              user_id: subscription.user_id,
              type: 'subscription_expiring_soon',
              data: {
                subscription_id: subscription.subscription_id
              }
            }
          });

          if (!existingNotification) {
            await Notifications.create({
              user_id: subscription.user_id,
              type: 'subscription_expiring_soon',
              title: '–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç',
              message: `–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ ${subscription.subscription_type} –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ ${this.getDaysRemaining(subscription.end_date)} –¥–Ω–µ–π.`,
              data: {
                subscription_id: subscription.id,
                subscription_type: subscription.subscription_type,
                days_remaining: this.getDaysRemaining(subscription.end_date)
              }
            });
            
            notifiedCount++;
          }
        } catch (error) {
          console.error(`‚ùå [SUBSCRIPTION_MANAGER] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ ${subscription.id}:`, error);
        }
      }

      return notifiedCount;

    } catch (error) {
      console.error('‚ùå [SUBSCRIPTION_MANAGER] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫:', error);
      throw error;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–æ–º —Å—Ä–µ–¥—Å—Ç–≤
  async checkLowBalanceSubscriptions() {
    try {
      const activeSubscriptions = await Subscriptions.findAll({
        where: {
          status: 'active',
          auto_renewal: true
        },
        include: [{
          model: User,
          as: 'User',
          attributes: ['login', 'balance']
        }]
      });

      let lowBalanceCount = 0;

      for (const subscription of activeSubscriptions) {
        try {
          const plan = await SubscriptionPlans.findOne({
            where: { type: subscription.subscription_type, is_active: true }
          });

          if (plan && subscription.User.balance < plan.monthly_price) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ —Å—Ä–µ–¥—Å—Ç–≤
            await Notifications.create({
              user_id: subscription.user_id,
              type: 'low_balance_warning',
              title: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤',
              message: `–î–ª—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ ${subscription.subscription_type} –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ ${plan.monthly_price - subscription.User.balance} —Ñ–æ–∫—Å–∏–∫–æ–≤.`,
              data: {
                subscription_id: subscription.id,
                subscription_type: subscription.subscription_type,
                required_amount: plan.monthly_price,
                current_balance: subscription.User.balance,
                deficit: plan.monthly_price - subscription.User.balance
              }
            });
            
            lowBalanceCount++;
          }
        } catch (error) {
          console.error(`‚ùå [SUBSCRIPTION_MANAGER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ ${subscription.id}:`, error);
        }
      }

      return lowBalanceCount;

    } catch (error) {
      console.error('‚ùå [SUBSCRIPTION_MANAGER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫ —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–æ–º —Å—Ä–µ–¥—Å—Ç–≤:', error);
      throw error;
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–Ω–µ–π
  getDaysRemaining(endDate) {
    const diff = endDate.getTime() - new Date().getTime();
    return Math.ceil(diff / (1000 * 60 * 60 * 24));
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
  async autoRenewSubscription(subscription) {
    try {
      console.log(`üîÑ [SUBSCRIPTION_MANAGER] –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ ${subscription.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${subscription.user_id}`);

      // –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏
      const plan = await sequelize.models.SubscriptionPlans.findOne({
        where: { type: subscription.subscription_type, is_active: true }
      });

      if (!plan) {
        throw new Error(`–ü–ª–∞–Ω ${subscription.subscription_type} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await sequelize.models.User.findOne({ 
        where: { login: subscription.user_id } 
      });

      if (!user) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
      if (user.balance < plan.monthly_price) {
        throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è');
      }

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è (–ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –Ω–∞ –º–µ—Å—è—Ü)
      const newEndDate = new Date(subscription.end_date);
      newEndDate.setMonth(newEndDate.getMonth() + 1);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
      subscription.end_date = newEndDate;
      await subscription.save();

      // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
      const newBalance = user.balance - plan.monthly_price;
      await sequelize.models.User.update(
        { balance: newBalance },
        { where: { login: subscription.user_id } }
      );

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
      await sequelize.models.SubscriptionPayments.create({
        subscription_id: subscription.id,
        user_id: subscription.user_id,
        amount: plan.monthly_price,
        payment_method: 'balance',
        payment_type: 'auto_renewal',
        status: 'completed'
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–∏
      await sequelize.models.Notifications.create({
        user_id: subscription.user_id,
        type: 'subscription_auto_renewed',
        title: '–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏',
        message: `–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ ${subscription.subscription_type} –ø—Ä–æ–¥–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ ${newEndDate.toLocaleDateString('ru-RU')}. –°–ø–∏—Å–∞–Ω–æ ${plan.monthly_price} —Ñ–æ–∫—Å–∏–∫–æ–≤.`,
        data: {
          subscription_id: subscription.id,
          subscription_type: subscription.subscription_type,
          amount_charged: plan.monthly_price,
          new_balance: newBalance,
          new_expiry_date: newEndDate
        }
      });

      console.log(`‚úÖ [SUBSCRIPTION_MANAGER] –ü–æ–¥–ø–∏—Å–∫–∞ ${subscription.id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏`);
      
      return {
        success: true,
        new_end_date: newEndDate,
        amount_charged: plan.monthly_price,
        new_balance: newBalance
      };

    } catch (error) {
      console.error(`‚ùå [SUBSCRIPTION_MANAGER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ ${subscription.id}:`, error);
      throw error;
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–º–µ–Ω—ã —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
  async changeSubscriptionPlan(userId, newPlanType, durationMonths = 1) {
    try {
      console.log(`üîÑ [SUBSCRIPTION_MANAGER] –°–º–µ–Ω–∞ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –Ω–∞ ${newPlanType}`);

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
      const currentSubscription = await Subscriptions.getUserActiveSubscription(userId);
      
      // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω
      const newPlan = await SubscriptionPlans.findOne({
        where: { type: newPlanType, is_active: true }
      });

      if (!newPlan) {
        throw new Error(`–ü–ª–∞–Ω ${newPlanType} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
      let price;
      switch (durationMonths) {
        case 1:
          price = newPlan.monthly_price;
          break;
        case 3:
          price = newPlan.quarterly_price;
          break;
        case 12:
          price = newPlan.yearly_price;
          break;
        default:
          throw new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å');
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await User.findOne({ where: { login: userId } });

      if (user.balance < price) {
        throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–º–µ–Ω—ã —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞');
      }

      // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, –æ—Ç–º–µ–Ω—è–µ–º –µ—ë
      if (currentSubscription) {
        currentSubscription.status = 'cancelled';
        currentSubscription.auto_renewal = false; // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
        await currentSubscription.save();
      }

      // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
      const newBalance = user.balance - price;
      await User.update(
        { balance: newBalance },
        { where: { login: userId } }
      );

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
      const startDate = new Date();
      const endDate = new Date(startDate);
      endDate.setMonth(endDate.getMonth() + durationMonths);

      const newSubscription = await Subscriptions.create({
        user_id: userId,
        subscription_type: newPlanType,
        start_date: startDate,
        end_date: endDate,
        auto_renewal: true, // –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        payment_amount: price,
        payment_method: 'balance',
        status: 'active'
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await User.update(
        { viptype: newPlanType },
        { where: { login: userId } }
      );

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
      await SubscriptionPayments.create({
        subscription_id: newSubscription.id,
        user_id: userId,
        amount: price,
        payment_method: 'balance',
        payment_type: 'upgrade',
        status: 'completed'
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      await Notifications.create({
        user_id: userId,
        type: 'subscription_upgraded',
        title: '–¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω –∏–∑–º–µ–Ω–µ–Ω',
        message: `–í–∞—à —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${newPlanType}. –°–ø–∏—Å–∞–Ω–æ ${price} —Ñ–æ–∫—Å–∏–∫–æ–≤.`,
        data: {
          subscription_id: newSubscription.id,
          new_plan: newPlanType,
          amount_charged: price,
          new_balance: newBalance,
          expiry_date: endDate
        }
      });

      console.log(`‚úÖ [SUBSCRIPTION_MANAGER] –¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      
      return {
        success: true,
        new_subscription: newSubscription,
        new_balance: newBalance
      };

    } catch (error) {
      console.error(`‚ùå [SUBSCRIPTION_MANAGER] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
      throw error;
    }
  }
}

module.exports = SubscriptionManager;
