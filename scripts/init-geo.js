#!/usr/bin/env node

const { sequelize } = require('../src/config/database');
const fs = require('fs');
const path = require('path');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m'
};

const log = (color, message) => {
  console.log(`${colors[color]}${message}${colors.reset}`);
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã geo
const checkGeoTable = async () => {
  try {
    const [results] = await sequelize.query(`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name = 'geo'
      );
    `);
    return results[0].exists;
  } catch (error) {
    log('red', `–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã geo: ${error.message}`);
    return false;
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã geo –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
const createGeoTable = async () => {
  try {
    log('blue', 'üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã geo...');
    
    await sequelize.query(`
      CREATE TABLE IF NOT EXISTS geo (
        id SERIAL PRIMARY KEY,
        country VARCHAR(100) NOT NULL,
        region VARCHAR(100),
        city VARCHAR(100) NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
    await sequelize.query(`
      CREATE INDEX IF NOT EXISTS idx_geo_country ON geo(country);
      CREATE INDEX IF NOT EXISTS idx_geo_city ON geo(city);
      CREATE INDEX IF NOT EXISTS idx_geo_search ON geo(country, city);
    `);
    
    log('green', '‚úÖ –¢–∞–±–ª–∏—Ü–∞ geo —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    return true;
  } catch (error) {
    if (error.message.includes('already exists')) {
      log('yellow', '‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ geo —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      return true;
    }
    log('red', `‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã geo: ${error.message}`);
    return false;
  }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ geo
const checkGeoData = async () => {
  try {
    const [results] = await sequelize.query('SELECT COUNT(*) as count FROM geo');
    return parseInt(results[0].count);
  } catch (error) {
    log('red', `–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö geo: ${error.message}`);
    return 0;
  }
};

// –ò–º–ø–æ—Ä—Ç –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
const importBasicData = async () => {
  try {
    log('blue', 'üå± –ò–º–ø–æ—Ä—Ç –±–∞–∑–æ–≤—ã—Ö –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    const basicData = [
      { country: '–†–æ—Å—Å–∏—è', region: '–ú–æ—Å–∫–≤–∞', city: '–ú–æ—Å–∫–≤–∞' },
      { country: '–†–æ—Å—Å–∏—è', region: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', city: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥' },
      { country: '–†–æ—Å—Å–∏—è', region: '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', city: '–ü–æ–¥–æ–ª—å—Å–∫' },
      { country: '–†–æ—Å—Å–∏—è', region: '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', city: '–ú—ã—Ç–∏—â–∏' },
      { country: '–†–æ—Å—Å–∏—è', region: '–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', city: '–ì–∞—Ç—á–∏–Ω–∞' },
      { country: '–£–∫—Ä–∞–∏–Ω–∞', region: '–ö–∏–µ–≤', city: '–ö–∏–µ–≤' },
      { country: '–£–∫—Ä–∞–∏–Ω–∞', region: '–•–∞—Ä—å–∫–æ–≤', city: '–•–∞—Ä—å–∫–æ–≤' },
      { country: '–ë–µ–ª–∞—Ä—É—Å—å', region: '–ú–∏–Ω—Å–∫', city: '–ú–∏–Ω—Å–∫' },
      { country: '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω', region: '–ê–ª–º–∞—Ç—ã', city: '–ê–ª–º–∞—Ç—ã' }
    ];
    
    for (const item of basicData) {
      await sequelize.query(`
        INSERT INTO geo (country, region, city, created_at, updated_at)
        VALUES (:country, :region, :city, NOW(), NOW())
        ON CONFLICT DO NOTHING
      `, {
        replacements: item
      });
    }
    
    log('green', '‚úÖ –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
    return true;
  } catch (error) {
    log('red', `‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
    return false;
  }
};

// –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQL —Ñ–∞–π–ª–∞
const importFromSQLFile = async () => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª—É
    const possiblePaths = [
      path.join(__dirname, '..', 'kolomigs_swing.sql'),
      path.join(__dirname, '..', 'swingfox_kolomigs.sql')
    ];
    
    let sqlFilePath = null;
    for (const filePath of possiblePaths) {
      if (fs.existsSync(filePath)) {
        sqlFilePath = filePath;
        break;
      }
    }
    
    if (!sqlFilePath) {
      log('yellow', '‚ö†Ô∏è  SQL —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç—è–º:');
      possiblePaths.forEach(p => log('yellow', `   - ${p}`));
      return false;
    }
    
    log('blue', `üìÇ –ù–∞–π–¥–µ–Ω SQL —Ñ–∞–π–ª: ${sqlFilePath}`);
    
    log('blue', 'üìÇ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQL —Ñ–∞–π–ª–∞...');
    
    const sqlContent = fs.readFileSync(sqlFilePath, 'utf8');
    // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞ geo –¥–∞–Ω–Ω—ã—Ö
    let geoInserts = sqlContent.match(/INSERT INTO `geo`[^;]+;/g);
    if (!geoInserts) {
      geoInserts = sqlContent.match(/INSERT INTO geo[^;]+;/g);
    }
    if (!geoInserts) {
      // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤—Å–µ INSERT'—ã –∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ geo
      const allInserts = sqlContent.match(/INSERT INTO[^;]+;/g) || [];
      geoInserts = allInserts.filter(insert =>
        insert.toLowerCase().includes('geo') ||
        insert.toLowerCase().includes('country') ||
        insert.toLowerCase().includes('city')
      );
    }
    
    log('blue', `üìä –ù–∞–π–¥–µ–Ω–æ ${geoInserts ? geoInserts.length : 0} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö geo –∑–∞–ø–∏—Å–µ–π`);
    
    if (!geoInserts || geoInserts.length === 0) {
      log('yellow', '‚ö†Ô∏è  Geo –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ SQL —Ñ–∞–π–ª–µ');
      return false;
    }
    
    let importedCount = 0;
    
    for (const insert of geoInserts) {
      try {
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ VALUES –≤ –æ–¥–Ω–æ–º INSERT (–º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ)
        const valuesMatch = insert.match(/VALUES\s*([\s\S]*);/i);
        if (!valuesMatch) {
          continue;
        }
        
        const valuesBlock = valuesMatch[1];
        // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏: ('...', '...', '...')
        const valueRows = valuesBlock.match(/\([^)]+\)/g);
        
        if (!valueRows) {
          continue;
        }
        
        for (const row of valueRows) {
          try {
            // –£–±–∏—Ä–∞–µ–º —Å–∫–æ–±–∫–∏ –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º
            const cleanRow = row.slice(1, -1); // —É–±–∏—Ä–∞–µ–º ( –∏ )
            const values = cleanRow.split(',').map(v =>
              v.trim().replace(/^'|'$/g, '').replace(/'/g, "")
            );
            
            if (values.length >= 3) {
              const [country, region, city] = values;
              
              // –°–æ–∑–¥–∞–µ–º PostgreSQL –∑–∞–ø—Ä–æ—Å —Å created_at –∏ updated_at
              await sequelize.query(`
                INSERT INTO geo (country, region, city, created_at, updated_at)
                VALUES (:country, :region, :city, NOW(), NOW())
                ON CONFLICT DO NOTHING
              `, {
                replacements: { country, region, city }
              });
              
              importedCount++;
              
              if (importedCount % 1000 === 0) {
                log('blue', `   üìä –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${importedCount} –∑–∞–ø–∏—Å–µ–π...`);
              }
            }
          } catch (rowError) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫
            if (!rowError.message.includes('duplicate') && !rowError.message.includes('unique')) {
              log('yellow', `‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å—Ç—Ä–æ–∫–∏: ${rowError.message}`);
            }
          }
        }
      } catch (error) {
        log('yellow', `‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ INSERT: ${error.message}`);
      }
    }
    
    log('green', `‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${importedCount} –∑–∞–ø–∏—Å–µ–π –∏–∑ SQL —Ñ–∞–π–ª–∞`);
    return true;
  } catch (error) {
    log('red', `‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ SQL —Ñ–∞–π–ª–∞: ${error.message}`);
    return false;
  }
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
const main = async () => {
  try {
    log('blue', 'üåç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await sequelize.authenticate();
    log('green', '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã geo
    const tableExists = await checkGeoTable();
    if (!tableExists) {
      const created = await createGeoTable();
      if (!created) {
        process.exit(1);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    const existingCount = await checkGeoData();
    log('blue', `üìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ geo: ${existingCount}`);
    
    if (existingCount > 100) {
      log('green', '‚úÖ –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
      process.exit(0);
    }
    
    // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
    log('blue', 'üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...');
    await sequelize.query('DELETE FROM geo');
    
    // –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –¢–û–õ–¨–ö–û –∏–∑ SQL —Ñ–∞–π–ª–∞
    log('blue', 'üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –∏–∑ SQL —Ñ–∞–π–ª–∞...');
    await importFromSQLFile();
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    const finalCount = await checkGeoData();
    log('green', `üéâ –ò—Ç–æ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ geo: ${finalCount}`);
    
    process.exit(0);
    
  } catch (error) {
    log('red', `‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    console.error(error);
    process.exit(1);
  }
};

// –ó–∞–ø—É—Å–∫
main();