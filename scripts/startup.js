#!/usr/bin/env node

const { execSync, spawn } = require('child_process');
const fs = require('fs');
const path = require('path');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m'
};

const log = (color, message) => {
  console.log(`${colors[color]}${message}${colors.reset}`);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const waitForDatabase = async () => {
  const dbHost = process.env.DB_HOST || 'localhost';
  const dbPort = process.env.DB_PORT || '5432';
  const dbUser = process.env.DB_USER || 'postgres';
  
  log('yellow', '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
  
  let connected = false;
  let attempts = 0;
  const maxAttempts = 30;
  
  while (!connected && attempts < maxAttempts) {
    try {
      execSync(`pg_isready -h ${dbHost} -p ${dbPort} -U ${dbUser}`, { 
        stdio: 'pipe',
        timeout: 5000 
      });
      connected = true;
      log('green', '‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞!');
    } catch (error) {
      attempts++;
      log('yellow', `   üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ${dbHost}:${dbPort}... (–ø–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxAttempts})`);
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
  }
  
  if (!connected) {
    log('red', '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!');
    process.exit(1);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π
const runMigrations = () => {
  log('blue', 'üìã –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π...');
  
  try {
    execSync('npm run migrate', { stdio: 'pipe' });
    log('green', '‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    return true;
  } catch (error) {
    const errorOutput = error.stderr ? error.stderr.toString() : error.message;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏
    if (errorOutput.includes('already exists') ||
        errorOutput.includes('already exist') ||
        errorOutput.includes('relation') && errorOutput.includes('already exists')) {
      log('yellow', '‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–±—ä–µ–∫—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É');
      log('green', '‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã (—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏)');
      return true;
    } else {
      log('red', '‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π!');
      console.error(errorOutput);
      return false;
    }
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ geo –¥–∞–Ω–Ω—ã—Ö
const initializeGeoData = () => {
  log('blue', 'üåç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...');
  
  try {
    execSync('node scripts/init-geo.js', { stdio: 'inherit' });
    log('green', '‚úÖ –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!');
  } catch (error) {
    log('yellow', '‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ geo –¥–∞–Ω–Ω—ã—Ö');
    console.warn(error.message);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö seeders
const runSeeders = () => {
  log('blue', 'üå± –ó–∞–ø—É—Å–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö seeders...');
  
  try {
    execSync('npm run seed', { stdio: 'pipe' });
    log('green', '‚úÖ Seeders –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
  } catch (error) {
    log('yellow', '‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ–∫–æ—Ç–æ—Ä—ã–µ seeders –º–æ–≥–ª–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è (–≤–æ–∑–º–æ–∂–Ω–æ, –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)');
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const startApplication = () => {
  log('blue', 'üéØ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
  
  const isProduction = process.env.NODE_ENV === 'production';
  
  if (isProduction) {
    log('green', 'üè≠ Production —Ä–µ–∂–∏–º');
    spawn('npm', ['start'], { stdio: 'inherit' });
  } else {
    log('yellow', 'üîß Development —Ä–µ–∂–∏–º');
    spawn('nodemon', ['--inspect=0.0.0.0:9229', 'server.js'], { stdio: 'inherit' });
  }
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
const main = async () => {
  try {
    log('blue', 'üöÄ SwingFox Backend Starting...');
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ä–µ–¥–µ
    log('blue', 'üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ä–µ–¥–µ:');
    console.log(`   üè† NODE_ENV: ${process.env.NODE_ENV || 'development'}`);
    console.log(`   üóÑÔ∏è  DB_HOST: ${process.env.DB_HOST || 'localhost'}`);
    console.log(`   üîå DB_PORT: ${process.env.DB_PORT || '5432'}`);
    console.log(`   üë§ DB_USER: ${process.env.DB_USER || 'postgres'}`);
    console.log(`   üì¶ DB_NAME: ${process.env.DB_NAME || 'swingfox'}`);
    console.log('');
    
    // –û–∂–∏–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await waitForDatabase();
    
    // –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π
    const migrationsOk = runMigrations();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–π)
    initializeGeoData();
    
    // –ó–∞–ø—É—Å–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö seeders
    runSeeders();
    
    if (!migrationsOk) {
      log('yellow', '‚ö†Ô∏è  –ú–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —Å –æ—à–∏–±–∫–∞–º–∏, –Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è');
    }
    
    log('green', 'üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('');
    
    // –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    startApplication();
    
  } catch (error) {
    log('red', `‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${error.message}`);
    console.error(error);
    process.exit(1);
  }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', () => {
  log('yellow', '\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  process.exit(0);
});

process.on('SIGTERM', () => {
  log('yellow', '\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main().catch(error => {
  log('red', `‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
  console.error(error);
  process.exit(1);
});