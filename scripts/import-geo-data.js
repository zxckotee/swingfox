const fs = require('fs');
const path = require('path');
const { sequelize, Geo } = require('../src/models');

/**
 * –°–∫—Ä–∏–ø—Ç –∏–º–ø–æ—Ä—Ç–∞ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ PHP –≤–µ—Ä—Å–∏–∏ –≤ –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 */

async function importGeoData() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ PHP –≤–µ—Ä—Å–∏–∏...');
  
  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    await sequelize.authenticate();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    // –ü—É—Ç—å –∫ SQL —Ñ–∞–π–ª—É PHP –≤–µ—Ä—Å–∏–∏
    const sqlFilePath = path.join(__dirname, '../kolomigs_swing.sql');
    
    if (!fs.existsSync(sqlFilePath)) {
      throw new Error(`‚ùå SQL —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${sqlFilePath}`);
    }

    console.log('üìñ –ß—Ç–µ–Ω–∏–µ SQL —Ñ–∞–π–ª–∞...');
    const sqlContent = fs.readFileSync(sqlFilePath, 'utf8');
    
    // –ü–æ–∏—Å–∫ —Å–µ–∫—Ü–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ geo —Ç–∞–±–ª–∏—Ü—ã
    console.log('üîç –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö geo —Ç–∞–±–ª–∏—Ü—ã...');
    
    // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ INSERT –∑–∞–ø—Ä–æ—Å–æ–≤ geo —Ç–∞–±–ª–∏—Ü—ã
    const geoInsertRegex = /INSERT INTO `geo` VALUES\s*\((.*?)\);/g;
    
    // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    const valuesRegex = /\('([^']*?)','([^']*?)','([^']*?)'\)/g;
    
    let matches;
    const geoData = [];
    let totalMatches = 0;
    
    // –ü–æ–∏—Å–∫ –≤—Å–µ—Ö INSERT –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è geo —Ç–∞–±–ª–∏—Ü—ã
    while ((matches = geoInsertRegex.exec(sqlContent)) !== null) {
      const insertValues = matches[1];
      let valueMatch;
      
      // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –æ–¥–Ω–æ–≥–æ INSERT –∑–∞–ø—Ä–æ—Å–∞
      while ((valueMatch = valuesRegex.exec(insertValues)) !== null) {
        const [, country, region, city] = valueMatch;
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å –ø—É—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        if (country && city) {
          geoData.push({
            country: country.trim(),
            region: region.trim() || null,
            city: city.trim(),
            created_at: new Date(),
            updated_at: new Date()
          });
          totalMatches++;
        }
      }
    }
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${totalMatches} –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π`);
    
    if (geoData.length === 0) {
      throw new Error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞');
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    console.log('üìã –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:');
    geoData.slice(0, 5).forEach((item, index) => {
      console.log(`   ${index + 1}. ${item.country} -> ${item.region || 'N/A'} -> ${item.city}`);
    });
    
    if (geoData.length > 5) {
      console.log(`   ... –∏ –µ—â–µ ${geoData.length - 5} –∑–∞–ø–∏—Å–µ–π`);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ geo —Ç–∞–±–ª–∏—Ü–µ...');
    const existingCount = await Geo.count();
    
    if (existingCount > 0) {
      console.log(`‚ö†Ô∏è  –í —Ç–∞–±–ª–∏—Ü–µ —É–∂–µ –µ—Å—Ç—å ${existingCount} –∑–∞–ø–∏—Å–µ–π`);
      console.log('ü§î –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–º–ø–æ—Ä—Ç? (–¥—É–±–ª–∏–∫–∞—Ç—ã –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã)');
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    console.log('üîß –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ Geo —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...');
    await Geo.sync();
    
    // –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö batch'–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const BATCH_SIZE = 1000;
    let importedCount = 0;
    let skippedCount = 0;
    
    console.log(`üì¶ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –±–∞—Ç—á–∞–º–∏ –ø–æ ${BATCH_SIZE} –∑–∞–ø–∏—Å–µ–π...`);
    
    for (let i = 0; i < geoData.length; i += BATCH_SIZE) {
      const batch = geoData.slice(i, i + BATCH_SIZE);
      const batchNumber = Math.floor(i / BATCH_SIZE) + 1;
      const totalBatches = Math.ceil(geoData.length / BATCH_SIZE);
      
      console.log(`   üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ ${batchNumber}/${totalBatches} (${batch.length} –∑–∞–ø–∏—Å–µ–π)...`);
      
      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º ignoreDuplicates –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
        const result = await Geo.bulkCreate(batch, {
          ignoreDuplicates: true,
          validate: true,
          returning: false // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
        });
        
        // –í Postgres bulkCreate —Å ignoreDuplicates –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        // –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
        importedCount += batch.length;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        const progress = ((i + batch.length) / geoData.length * 100).toFixed(1);
        console.log(`   ‚úÖ –ë–∞—Ç—á –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress}%`);
        
      } catch (batchError) {
        console.error(`   ‚ùå –û—à–∏–±–∫–∞ –≤ –±–∞—Ç—á–µ ${batchNumber}:`, batchError.message);
        
        // –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å–∏ –ø–æ –æ–¥–Ω–æ–π –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö
        console.log(`   üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –∑–∞–ø–∏—Å–µ–π –∏–∑ –±–∞—Ç—á–∞ ${batchNumber}...`);
        
        for (const record of batch) {
          try {
            await Geo.create(record);
            importedCount++;
          } catch (recordError) {
            skippedCount++;
            if (recordError.name !== 'SequelizeUniqueConstraintError') {
              console.warn(`   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–∞ –∑–∞–ø–∏—Å—å ${record.country}-${record.city}:`, recordError.message);
            }
          }
        }
      }
    }

    // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–º–ø–æ—Ä—Ç–∞:');
    console.log(`   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${geoData.length}`);
    console.log(`   üì• –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${importedCount}`);
    console.log(`   ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const finalCount = await Geo.count();
    console.log(`   üìà –ò—Ç–æ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ: ${finalCount}`);
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
    const countryStats = await Geo.findAll({
      attributes: [
        'country',
        [sequelize.fn('COUNT', sequelize.col('id')), 'cities_count']
      ],
      group: ['country'],
      order: [[sequelize.fn('COUNT', sequelize.col('id')), 'DESC']],
      limit: 10
    });
    
    console.log('\nüåç –¢–æ–ø-10 —Å—Ç—Ä–∞–Ω –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≥–æ—Ä–æ–¥–æ–≤:');
    countryStats.forEach((stat, index) => {
      console.log(`   ${index + 1}. ${stat.country}: ${stat.dataValues.cities_count} –≥–æ—Ä–æ–¥–æ–≤`);
    });
    
    console.log('\nüéâ –ò–º–ø–æ—Ä—Ç –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  } finally {
    await sequelize.close();
    console.log('üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
const forceImport = args.includes('--force');

if (forceImport) {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞...');
  importGeoData()
    .then(() => {
      console.log('‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
      process.exit(1);
    });
} else {
  console.log('üìñ –°–∫—Ä–∏–ø—Ç –∏–º–ø–æ—Ä—Ç–∞ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö');
  console.log('üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/import-geo-data.js --force');
  console.log('‚ö†Ô∏è  –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:');
  console.log('   1. SQL —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ kolomigs_swing.sql');
  console.log('   2. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞');
  console.log('   3. –í—ã–ø–æ–ª–Ω–µ–Ω—ã –≤—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏');
  console.log('\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ñ–ª–∞–≥ --force');
}

module.exports = importGeoData;