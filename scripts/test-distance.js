#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
 * –ó–∞–ø—É—Å–∫: node scripts/test-distance.js
 */

const { calculateDistance, parseGeo } = require('../src/utils/helpers');

function testDistanceCalculation() {
  console.log('üßÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π');
  console.log('==================================\n');
  
  // –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–µ —Ä–∞—Å—á–µ—Ç—ã —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
  console.log('1Ô∏è‚É£ –ë–∞–∑–æ–≤—ã–µ —Ä–∞—Å—á–µ—Ç—ã —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π:');
  
  const testCases = [
    {
      name: '–ú–æ—Å–∫–≤–∞ ‚Üí –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
      lat1: 55.7558, lon1: 37.6176,  // –ú–æ—Å–∫–≤–∞
      lat2: 59.9311, lon2: 30.3609   // –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥
    },
    {
      name: '–ú–æ—Å–∫–≤–∞ ‚Üí –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥',
      lat1: 55.7558, lon1: 37.6176,  // –ú–æ—Å–∫–≤–∞
      lat2: 56.8519, lon2: 60.6122   // –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥
    },
    {
      name: '–ú–æ—Å–∫–≤–∞ ‚Üí –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫',
      lat1: 55.7558, lon1: 37.6176,  // –ú–æ—Å–∫–≤–∞
      lat2: 55.0084, lon2: 82.9357   // –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫
    },
    {
      name: '–ú–æ—Å–∫–≤–∞ ‚Üí –°–æ—á–∏',
      lat1: 55.7558, lon1: 37.6176,  // –ú–æ—Å–∫–≤–∞
      lat2: 43.6028, lon2: 39.7342   // –°–æ—á–∏
    },
    {
      name: '–ú–æ—Å–∫–≤–∞ ‚Üí –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥',
      lat1: 55.7558, lon1: 37.6176,  // –ú–æ—Å–∫–≤–∞
      lat2: 54.7065, lon2: 20.5111   // –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥
    }
  ];
  
  testCases.forEach(testCase => {
    const distance = calculateDistance(
      testCase.lat1, testCase.lon1,
      testCase.lat2, testCase.lon2
    );
    
    console.log(`   ${testCase.name}: ${distance.toFixed(1)} –∫–º`);
  });
  
  // –¢–µ—Å—Ç 2: –ü–∞—Ä—Å–∏–Ω–≥ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
  console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:');
  
  const geoStrings = [
    '55.7558&&37.6176',    // –ú–æ—Å–∫–≤–∞
    '59.9311&&30.3609',    // –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥
    '56.8519&&60.6122',    // –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥
    'invalid&&format',     // –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    '55.7558',             // –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    '',                     // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    null                    // Null
  ];
  
  geoStrings.forEach(geoString => {
    const parsed = parseGeo(geoString);
    if (parsed) {
      console.log(`   "${geoString}" ‚Üí lat: ${parsed.lat}, lng: ${parsed.lng}`);
    } else {
      console.log(`   "${geoString}" ‚Üí ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å`);
    }
  });
  
  // –¢–µ—Å—Ç 3: –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è —á–µ—Ä–µ–∑ –ø–∞—Ä—Å–∏–Ω–≥
  console.log('\n3Ô∏è‚É£ –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è —á–µ—Ä–µ–∑ –ø–∞—Ä—Å–∏–Ω–≥:');
  
  const user1Geo = '55.7558&&37.6176';  // –ú–æ—Å–∫–≤–∞
  const user2Geo = '59.9311&&30.3609';  // –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥
  
  const geo1 = parseGeo(user1Geo);
  const geo2 = parseGeo(user2Geo);
  
  if (geo1 && geo2) {
    const distance = calculateDistance(geo1.lat, geo1.lng, geo2.lat, geo2.lng);
    console.log(`   –ú–æ—Å–∫–≤–∞ ‚Üí –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥: ${distance.toFixed(1)} –∫–º`);
  } else {
    console.log('   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç');
  }
  
  // –¢–µ—Å—Ç 4: –¢–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–æ–≤
  console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç–æ–≤:');
  
  // –¢–µ—Å—Ç —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è–º–∏ (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ)
  const moscowSpbDistance = calculateDistance(55.7558, 37.6176, 59.9311, 30.3609);
  const expectedDistance = 635; // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ú–æ—Å–∫–≤–∞-–°–ü–±
  
  const accuracy = Math.abs(moscowSpbDistance - expectedDistance) / expectedDistance * 100;
  console.log(`   –ú–æ—Å–∫–≤–∞ ‚Üí –°–ü–±: ${moscowSpbDistance.toFixed(1)} –∫–º (–æ–∂–∏–¥–∞–ª–æ—Å—å ~${expectedDistance} –∫–º)`);
  console.log(`   –¢–æ—á–Ω–æ—Å—Ç—å: ${(100 - accuracy).toFixed(1)}%`);
  
  // –¢–µ—Å—Ç 5: –ö—Ä–∞–π–Ω–∏–µ —Å–ª—É—á–∞–∏
  console.log('\n5Ô∏è‚É£ –ö—Ä–∞–π–Ω–∏–µ —Å–ª—É—á–∞–∏:');
  
  // –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
  const samePointDistance = calculateDistance(55.7558, 37.6176, 55.7558, 37.6176);
  console.log(`   –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${samePointDistance.toFixed(3)} –∫–º`);
  
  // –û—á–µ–Ω—å –±–ª–∏–∑–∫–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
  const closeDistance = calculateDistance(55.7558, 37.6176, 55.7559, 37.6177);
  console.log(`   –û—á–µ–Ω—å –±–ª–∏–∑–∫–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${closeDistance.toFixed(3)} –∫–º`);
  
  // –û—á–µ–Ω—å –¥–∞–ª–µ–∫–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
  const farDistance = calculateDistance(55.7558, 37.6176, -33.8688, 151.2093); // –ú–æ—Å–∫–≤–∞ ‚Üí –°–∏–¥–Ω–µ–π
  console.log(`   –ú–æ—Å–∫–≤–∞ ‚Üí –°–∏–¥–Ω–µ–π: ${farDistance.toFixed(1)} –∫–º`);
  
  console.log('\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  testDistanceCalculation();
}

module.exports = {
  testDistanceCalculation
};
