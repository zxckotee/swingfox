#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
 * –ó–∞–ø—É—Å–∫: node scripts/test-geolocation.js
 */

const { getGeoByIP, getGeoWithFallback, isValidIP } = require('../src/utils/geoLocation');

async function testGeolocation() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏');
  console.log('============================\n');
  
  // –¢–µ—Å—Ç 1: –í–∞–ª–∏–¥–∞—Ü–∏—è IP –∞–¥—Ä–µ—Å–æ–≤
  console.log('1Ô∏è‚É£ –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ IP –∞–¥—Ä–µ—Å–æ–≤:');
  const testIPs = [
    '8.8.8.8',           // Google DNS
    '1.1.1.1',           // Cloudflare DNS
    '127.0.0.1',         // Localhost
    '192.168.1.1',       // –õ–æ–∫–∞–ª—å–Ω–∞—è —Å–µ—Ç—å
    '256.256.256.256',   // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π IP
    'invalid-ip',        // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    ''                    // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
  ];
  
  testIPs.forEach(ip => {
    const isValid = isValidIP(ip);
    console.log(`   ${ip}: ${isValid ? '‚úÖ' : '‚ùå'}`);
  });
  
  console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ IP:');
  
  // –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –≤–∞–ª–∏–¥–Ω—ã—Ö IP
  const validIPs = ['8.8.8.8', '1.1.1.1'];
  
  for (const ip of validIPs) {
    console.log(`\n   –¢–µ—Å—Ç–∏—Ä—É–µ–º IP: ${ip}`);
    try {
      const geo = await getGeoByIP(ip);
      if (geo) {
        console.log(`   ‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${geo}`);
      } else {
        console.log(`   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã`);
      }
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
  }
  
  console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç fallback –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:');
  
  // –¢–µ—Å—Ç 3: Fallback –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è
  const fallbackTests = [
    '127.0.0.1',         // Localhost (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback)
    'invalid-ip',        // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π IP (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback)
    '8.8.8.8'           // –í–∞–ª–∏–¥–Ω—ã–π IP (–¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã)
  ];
  
  for (const ip of fallbackTests) {
    console.log(`\n   –¢–µ—Å—Ç–∏—Ä—É–µ–º IP: ${ip}`);
    try {
      const geo = await getGeoWithFallback(ip);
      console.log(`   üìç –†–µ–∑—É–ª—å—Ç–∞—Ç: ${geo}`);
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
  }
  
  console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:');
  
  // –¢–µ—Å—Ç 4: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
  const startTime = Date.now();
  const testCount = 3;
  
  for (let i = 0; i < testCount; i++) {
    const start = Date.now();
    await getGeoWithFallback('8.8.8.8');
    const duration = Date.now() - start;
    console.log(`   –ó–∞–ø—Ä–æ—Å ${i + 1}: ${duration}ms`);
  }
  
  const totalTime = Date.now() - startTime;
  const avgTime = totalTime / testCount;
  
  console.log(`   üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${avgTime.toFixed(0)}ms`);
  console.log(`   üìä –û–±—â–µ–µ –≤—Ä–µ–º—è: ${totalTime}ms`);
  
  console.log('\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  testGeolocation().catch(error => {
    console.error('üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    process.exit(1);
  });
}

module.exports = {
  testGeolocation
};
