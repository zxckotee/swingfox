'use strict';

const fs = require('fs');
const path = require('path');

/** @type {import('sequelize-cli').Migration} */
module.exports = {
  async up(queryInterface, Sequelize) {
    console.log('üåç –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ geo
      const existingCount = await queryInterface.sequelize.query(
        'SELECT COUNT(*) as count FROM geo',
        { type: Sequelize.QueryTypes.SELECT }
      );
      
      if (existingCount[0].count > 0) {
        console.log(`üìä –í —Ç–∞–±–ª–∏—Ü–µ geo —É–∂–µ –µ—Å—Ç—å ${existingCount[0].count} –∑–∞–ø–∏—Å–µ–π. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç.`);
        return;
      }

      // –ü—É—Ç—å –∫ SQL —Ñ–∞–π–ª—É
      const sqlFilePath = '../kolomigs_swing.sql';
      
      if (!fs.existsSync(sqlFilePath)) {
        console.warn(`‚ö†Ô∏è  SQL —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${sqlFilePath}`);
        console.log('üí° –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –†–æ—Å—Å–∏–∏...');
        
        // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –†–æ—Å—Å–∏–∏ –µ—Å–ª–∏ SQL —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
        const basicGeoData = [
          { country: '–†–æ—Å—Å–∏—è', region: null, city: '–ú–æ—Å–∫–≤–∞' },
          { country: '–†–æ—Å—Å–∏—è', region: null, city: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥' },
          { country: '–†–æ—Å—Å–∏—è', region: null, city: '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫' },
          { country: '–†–æ—Å—Å–∏—è', region: null, city: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥' },
          { country: '–†–æ—Å—Å–∏—è', region: null, city: '–ö–∞–∑–∞–Ω—å' },
          { country: '–†–æ—Å—Å–∏—è', region: null, city: '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥' },
          { country: '–†–æ—Å—Å–∏—è', region: null, city: '–ß–µ–ª—è–±–∏–Ω—Å–∫' },
          { country: '–†–æ—Å—Å–∏—è', region: null, city: '–°–∞–º–∞—Ä–∞' },
          { country: '–†–æ—Å—Å–∏—è', region: null, city: '–û–º—Å–∫' },
          { country: '–†–æ—Å—Å–∏—è', region: null, city: '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É' },
          { country: '–£–∫—Ä–∞–∏–Ω–∞', region: null, city: '–ö–∏–µ–≤' },
          { country: '–£–∫—Ä–∞–∏–Ω–∞', region: null, city: '–•–∞—Ä—å–∫–æ–≤' },
          { country: '–£–∫—Ä–∞–∏–Ω–∞', region: null, city: '–û–¥–µ—Å—Å–∞' },
          { country: '–ë–µ–ª–∞—Ä—É—Å—å', region: null, city: '–ú–∏–Ω—Å–∫' },
          { country: '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω', region: null, city: '–ê–ª–º–∞—Ç—ã' },
          { country: '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω', region: null, city: '–ê—Å—Ç–∞–Ω–∞' }
        ];
        
        await queryInterface.bulkInsert('geo', basicGeoData.map(item => ({
          ...item,
          created_at: new Date(),
          updated_at: new Date()
        })));
        
        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${basicGeoData.length} –±–∞–∑–æ–≤—ã—Ö –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π`);
        return;
      }

      console.log('üìñ –ß—Ç–µ–Ω–∏–µ SQL —Ñ–∞–π–ª–∞...');
      const sqlContent = fs.readFileSync(sqlFilePath, 'utf8');
      
      // –ü–æ–∏—Å–∫ —Å–µ–∫—Ü–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ geo —Ç–∞–±–ª–∏—Ü—ã
      console.log('üîç –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö geo —Ç–∞–±–ª–∏—Ü—ã...');
      
      // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ INSERT –∑–∞–ø—Ä–æ—Å–æ–≤ geo —Ç–∞–±–ª–∏—Ü—ã
      const geoInsertRegex = /INSERT INTO `geo` VALUES\s*\((.*?)\);/g;
      
      // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
      const valuesRegex = /\('([^']*?)','([^']*?)','([^']*?)'\)/g;
      
      let matches;
      const geoData = [];
      let totalMatches = 0;
      
      // –ü–æ–∏—Å–∫ –≤—Å–µ—Ö INSERT –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è geo —Ç–∞–±–ª–∏—Ü—ã
      while ((matches = geoInsertRegex.exec(sqlContent)) !== null) {
        const insertValues = matches[1];
        let valueMatch;
        
        // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –æ–¥–Ω–æ–≥–æ INSERT –∑–∞–ø—Ä–æ—Å–∞
        while ((valueMatch = valuesRegex.exec(insertValues)) !== null) {
          const [, country, region, city] = valueMatch;
          
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å –ø—É—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
          if (country && city) {
            geoData.push({
              country: country.trim(),
              region: region.trim() || null,
              city: city.trim(),
              created_at: new Date(),
              updated_at: new Date()
            });
            totalMatches++;
          }
        }
      }
      
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${totalMatches} –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π`);
      
      if (geoData.length === 0) {
        throw new Error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞');
      }

      // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
      console.log('üìã –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:');
      geoData.slice(0, 5).forEach((item, index) => {
        console.log(`   ${index + 1}. ${item.country} -> ${item.region || 'N/A'} -> ${item.city}`);
      });
      
      if (geoData.length > 5) {
        console.log(`   ... –∏ –µ—â–µ ${geoData.length - 5} –∑–∞–ø–∏—Å–µ–π`);
      }

      // –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö batch'–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      const BATCH_SIZE = 1000;
      let importedCount = 0;
      
      console.log(`üì¶ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –±–∞—Ç—á–∞–º–∏ –ø–æ ${BATCH_SIZE} –∑–∞–ø–∏—Å–µ–π...`);
      
      for (let i = 0; i < geoData.length; i += BATCH_SIZE) {
        const batch = geoData.slice(i, i + BATCH_SIZE);
        const batchNumber = Math.floor(i / BATCH_SIZE) + 1;
        const totalBatches = Math.ceil(geoData.length / BATCH_SIZE);
        
        console.log(`   üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ ${batchNumber}/${totalBatches} (${batch.length} –∑–∞–ø–∏—Å–µ–π)...`);
        
        try {
          await queryInterface.bulkInsert('geo', batch, {
            ignoreDuplicates: true
          });
          
          importedCount += batch.length;
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
          const progress = ((i + batch.length) / geoData.length * 100).toFixed(1);
          console.log(`   ‚úÖ –ë–∞—Ç—á –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress}%`);
          
        } catch (batchError) {
          console.error(`   ‚ùå –û—à–∏–±–∫–∞ –≤ –±–∞—Ç—á–µ ${batchNumber}:`, batchError.message);
          throw batchError;
        }
      }

      // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–º–ø–æ—Ä—Ç–∞:');
      console.log(`   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${geoData.length}`);
      console.log(`   üì• –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${importedCount}`);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      const finalCount = await queryInterface.sequelize.query(
        'SELECT COUNT(*) as count FROM geo',
        { type: Sequelize.QueryTypes.SELECT }
      );
      console.log(`   üìà –ò—Ç–æ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ: ${finalCount[0].count}`);
      
      // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
      const countryStats = await queryInterface.sequelize.query(
        `SELECT country, COUNT(*) as cities_count 
         FROM geo 
         GROUP BY country 
         ORDER BY cities_count DESC 
         LIMIT 10`,
        { type: Sequelize.QueryTypes.SELECT }
      );
      
      console.log('\nüåç –¢–æ–ø-10 —Å—Ç—Ä–∞–Ω –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≥–æ—Ä–æ–¥–æ–≤:');
      countryStats.forEach((stat, index) => {
        console.log(`   ${index + 1}. ${stat.country}: ${stat.cities_count} –≥–æ—Ä–æ–¥–æ–≤`);
      });
      
      console.log('\nüéâ –ò–º–ø–æ—Ä—Ç –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
      throw error;
    }
  },

  async down(queryInterface, Sequelize) {
    console.log('üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
      await queryInterface.bulkDelete('geo', null, {});
      console.log('‚úÖ –í—Å–µ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
      throw error;
    }
  }
};