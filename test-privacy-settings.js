#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
 * –ó–∞–ø—É—Å–∫: node test-privacy-settings.js
 */

const axios = require('axios');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BASE_URL = 'http://localhost:3001/api';
const TEST_USER = {
  login: 'testuser',
  password: 'testpass123'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const log = (message, type = 'INFO') => {
  const timestamp = new Date().toISOString();
  console.log(`[${timestamp}] [${type}] ${message}`);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API
const testAPI = async (endpoint, method = 'GET', data = null, token = null) => {
  try {
    const config = {
      method,
      url: `${BASE_URL}${endpoint}`,
      headers: {
        'Content-Type': 'application/json'
      }
    };

    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }

    if (data) {
      config.data = data;
    }

    const response = await axios(config);
    return { success: true, data: response.data, status: response.status };
  } catch (error) {
    return { 
      success: false, 
      error: error.response?.data || error.message, 
      status: error.response?.status 
    };
  }
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const runTests = async () => {
  log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏...');
  
  let authToken = null;
  
  // –¢–µ—Å—Ç 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  log('–¢–µ—Å—Ç 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  const authResult = await testAPI('/auth/login', 'POST', {
    login: TEST_USER.login,
    password: TEST_USER.password
  });
  
  if (authResult.success) {
    authToken = authResult.data.token;
    log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞', 'SUCCESS');
  } else {
    log('‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'WARN');
    
    const regResult = await testAPI('/auth/register', 'POST', {
      login: TEST_USER.login,
      email: 'test@example.com',
      password: TEST_USER.password,
      status: '–ú—É–∂—á–∏–Ω–∞',
      country: '–†–æ—Å—Å–∏—è',
      city: '–ú–æ—Å–∫–≤–∞'
    });
    
    if (regResult.success) {
      log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞', 'SUCCESS');
      
      // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      const authResult2 = await testAPI('/auth/login', 'POST', {
        login: TEST_USER.login,
        password: TEST_USER.password
      });
      
      if (authResult2.success) {
        authToken = authResult2.data.token;
        log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–∞', 'SUCCESS');
      } else {
        log('‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ —É–¥–∞–ª–∞—Å—å', 'ERROR');
        return;
      }
    } else {
      log('‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å', 'ERROR');
      return;
    }
  }
  
  // –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
  log('–¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏');
  const privacyResult = await testAPI('/users/privacy-settings', 'GET', null, authToken);
  
  if (privacyResult.success) {
    log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω—ã', 'SUCCESS');
    log(`üìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: ${JSON.stringify(privacyResult.data, null, 2)}`, 'INFO');
  } else {
    log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏', 'ERROR');
  }
  
  // –¢–µ—Å—Ç 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
  log('–¢–µ—Å—Ç 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏');
  const newSettings = {
    privacy: {
      anonymous_visits: true,
      show_online_status: false,
      show_last_seen: false,
      allow_messages: false,
      allow_gifts: false,
      allow_ratings: false,
      allow_comments: false
    },
    notifications: {
      new_matches: true,
      messages: false,
      likes: true,
      gifts: false,
      profile_visits: true
    }
  };
  
  const updateResult = await testAPI('/users/privacy-settings', 'PUT', newSettings, authToken);
  
  if (updateResult.success) {
    log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', 'SUCCESS');
  } else {
    log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏', 'ERROR');
  }
  
  // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
  log('–¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫');
  const privacyResult2 = await testAPI('/users/privacy-settings', 'GET', null, authToken);
  
  if (privacyResult2.success) {
    log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã', 'SUCCESS');
    log(`üìã –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: ${JSON.stringify(privacyResult2.data, null, 2)}`, 'INFO');
  } else {
    log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', 'ERROR');
  }
  
  // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ API –ø—Ä–æ—Ñ–∏–ª—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
  log('–¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ API –ø—Ä–æ—Ñ–∏–ª—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏');
  const profileResult = await testAPI(`/profiles/${TEST_USER.login}`, 'GET', null, authToken);
  
  if (profileResult.success) {
    log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω', 'SUCCESS');
    log(`üë§ –°—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω: ${profileResult.data.profile.online}`, 'INFO');
  } else {
    log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', 'ERROR');
  }
  
  // –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ API –≥–æ—Å—Ç–µ–π (—Ç—Ä–µ–±—É–µ—Ç VIP)
  log('–¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ API –≥–æ—Å—Ç–µ–π');
  const guestsResult = await testAPI('/notifications/guests', 'GET', null, authToken);
  
  if (guestsResult.success) {
    log('‚úÖ –ì–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω—ã', 'SUCCESS');
    log(`üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π: ${guestsResult.data.guests.length}`, 'INFO');
  } else {
    log(`‚ö†Ô∏è API –≥–æ—Å—Ç–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${guestsResult.error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`, 'WARN');
  }
  
  log('üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!', 'SUCCESS');
};

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  runTests().catch(error => {
    log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'ERROR');
    process.exit(1);
  });
}

module.exports = { runTests };
