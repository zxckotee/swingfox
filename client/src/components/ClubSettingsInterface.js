import React, { useState } from 'react';
import styled from 'styled-components';
import { motion } from 'framer-motion';
import { toast } from 'react-hot-toast';

// –ò–∫–æ–Ω–∫–∏
import { 
  SettingsIcon, 
  SaveIcon, 
  BotIcon,
  UsersIcon,
  BellIcon,
  ShieldIcon
} from './UI';

const Container = styled.div`
  padding: 20px 0;
`;

const Header = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 30px;
`;

const Title = styled.h2`
  font-size: 1.8rem;
  color: #2d3748;
  margin: 0;
  display: flex;
  align-items: center;
  gap: 10px;
`;

const SaveButton = styled.button`
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 12px 24px;
  background: linear-gradient(135deg, #48bb78 0%, #38a169 100%);
  color: white;
  border: none;
  border-radius: 12px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  
  &:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(72, 187, 120, 0.3);
  }
`;

const SettingsGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
  gap: 30px;
`;

const SettingsSection = styled(motion.div)`
  background: white;
  border-radius: 15px;
  padding: 25px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
  border: 1px solid #e2e8f0;
`;

const SectionTitle = styled.h3`
  font-size: 1.3rem;
  color: #2d3748;
  margin: 0 0 20px 0;
  display: flex;
  align-items: center;
  gap: 10px;
  padding-bottom: 10px;
  border-bottom: 2px solid #e2e8f0;
`;

const FormGroup = styled.div`
  margin-bottom: 20px;
`;

const Label = styled.label`
  display: block;
  font-weight: 600;
  color: #2d3748;
  margin-bottom: 8px;
  font-size: 0.9rem;
`;

const Input = styled.input`
  width: 100%;
  padding: 12px 16px;
  border: 1px solid #e2e8f0;
  border-radius: 8px;
  font-size: 0.9rem;
  transition: all 0.3s ease;
  
  &:focus {
    outline: none;
    border-color: #dc3522;
    box-shadow: 0 0 0 3px rgba(220, 53, 34, 0.1);
  }
`;

const TextArea = styled.textarea`
  width: 100%;
  padding: 12px 16px;
  border: 1px solid #e2e8f0;
  border-radius: 8px;
  font-size: 0.9rem;
  min-height: 100px;
  resize: vertical;
  font-family: inherit;
  transition: all 0.3s ease;
  
  &:focus {
    outline: none;
    border-color: #dc3522;
    box-shadow: 0 0 0 3px rgba(220, 53, 34, 0.1);
  }
`;

const Select = styled.select`
  width: 100%;
  padding: 12px 16px;
  border: 1px solid #e2e8f0;
  border-radius: 8px;
  font-size: 0.9rem;
  background: white;
  cursor: pointer;
  transition: all 0.3s ease;
  
  &:focus {
    outline: none;
    border-color: #dc3522;
    box-shadow: 0 0 0 3px rgba(220, 53, 34, 0.1);
  }
`;

const Checkbox = styled.div`
  display: flex;
  align-items: center;
  gap: 10px;
  margin-bottom: 15px;
  
  input[type="checkbox"] {
    width: 18px;
    height: 18px;
    accent-color: #dc3522;
  }
  
  label {
    font-weight: 500;
    color: #4a5568;
    cursor: pointer;
  }
`;

const ToggleSwitch = styled.div`
  display: flex;
  align-items: center;
  gap: 10px;
  margin-bottom: 15px;
  
  .switch {
    position: relative;
    display: inline-block;
    width: 50px;
    height: 24px;
  }
  
  .switch input {
    opacity: 0;
    width: 0;
    height: 0;
  }
  
  .slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #cbd5e0;
    transition: 0.3s;
    border-radius: 24px;
  }
  
  .slider:before {
    position: absolute;
    content: "";
    height: 18px;
    width: 18px;
    left: 3px;
    bottom: 3px;
    background-color: white;
    transition: 0.3s;
    border-radius: 50%;
  }
  
  input:checked + .slider {
    background-color: #dc3522;
  }
  
  input:checked + .slider:before {
    transform: translateX(26px);
  }
  
  label {
    font-weight: 500;
    color: #4a5568;
    cursor: pointer;
  }
`;

const HelpText = styled.p`
  font-size: 0.8rem;
  color: #718096;
  margin-top: 5px;
  line-height: 1.4;
`;

const BotSettings = styled.div`
  background: #f7fafc;
  border-radius: 10px;
  padding: 20px;
  margin-top: 15px;
`;

const BotMessagePreview = styled.div`
  background: white;
  border: 1px solid #e2e8f0;
  border-radius: 8px;
  padding: 15px;
  margin-top: 10px;
  font-size: 0.9rem;
  color: #4a5568;
  line-height: 1.5;
`;

const ClubSettingsInterface = () => {
  const [settings, setSettings] = useState({
    // –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª—É–±–∞
    clubName: '–í–µ—Å–µ–ª—ã–π –∫–ª—É–±',
    description: '–ö–ª—É–± –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ª—é–±—è—Ç –≤–µ—Å–µ–ª–∏—Ç—å—Å—è –∏ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è',
    category: 'party',
    city: '–ú–æ—Å–∫–≤–∞',
    isPrivate: false,
    maxMembers: 100,
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
    botEnabled: true,
    welcomeMessage: '–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –∫–ª—É–±! üëã –ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –∑–¥–µ—Å—å.',
    invitationMessage: '–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤–∞—Å –Ω–∞ –Ω–∞—à–µ —Å–ª–µ–¥—É—é—â–µ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ! –ë—É–¥–µ—Ç –æ—á–µ–Ω—å –≤–µ—Å–µ–ª–æ! üéâ',
    thanksMessage: '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–ª—É–±! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏! üíñ',
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    emailNotifications: true,
    pushNotifications: true,
    eventReminders: true,
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
    showMembersList: true,
    allowDirectMessages: true,
    requireApproval: false
  });

  const handleInputChange = (field, value) => {
    setSettings(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleSave = () => {
    toast.success('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
  };

  return (
    <Container>
      <Header>
        <Title>
          <SettingsIcon />
          –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª—É–±–∞
        </Title>
        <SaveButton onClick={handleSave}>
          <SaveIcon />
          –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        </SaveButton>
      </Header>

      <SettingsGrid>
        {/* –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
        <SettingsSection
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.3 }}
        >
          <SectionTitle>
            <UsersIcon />
            –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
          </SectionTitle>
          
          <FormGroup>
            <Label>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª—É–±–∞</Label>
            <Input
              type="text"
              value={settings.clubName}
              onChange={(e) => handleInputChange('clubName', e.target.value)}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª—É–±–∞"
            />
          </FormGroup>

          <FormGroup>
            <Label>–û–ø–∏—Å–∞–Ω–∏–µ</Label>
            <TextArea
              value={settings.description}
              onChange={(e) => handleInputChange('description', e.target.value)}
              placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–ª—É–±"
            />
          </FormGroup>

          <FormGroup>
            <Label>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</Label>
            <Select
              value={settings.category}
              onChange={(e) => handleInputChange('category', e.target.value)}
            >
              <option value="party">–í–µ—á–µ—Ä–∏–Ω–∫–∏</option>
              <option value="dinner">–£–∂–∏–Ω—ã</option>
              <option value="activity">–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</option>
              <option value="networking">–ù–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥</option>
            </Select>
          </FormGroup>

          <FormGroup>
            <Label>–ì–æ—Ä–æ–¥</Label>
            <Input
              type="text"
              value={settings.city}
              onChange={(e) => handleInputChange('city', e.target.value)}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥"
            />
          </FormGroup>

          <FormGroup>
            <Label>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</Label>
            <Input
              type="number"
              value={settings.maxMembers}
              onChange={(e) => handleInputChange('maxMembers', parseInt(e.target.value))}
              min="1"
              max="1000"
            />
          </FormGroup>

          <Checkbox>
            <input
              type="checkbox"
              checked={settings.isPrivate}
              onChange={(e) => handleInputChange('isPrivate', e.target.checked)}
            />
            <label>–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—É–± (—Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º)</label>
          </Checkbox>
        </SettingsSection>

        {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ */}
        <SettingsSection
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.3, delay: 0.1 }}
        >
          <SectionTitle>
            <BotIcon />
            –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
          </SectionTitle>
          
          <ToggleSwitch>
            <label className="switch">
              <input
                type="checkbox"
                checked={settings.botEnabled}
                onChange={(e) => handleInputChange('botEnabled', e.target.checked)}
              />
              <span className="slider"></span>
            </label>
            <label>–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±–æ—Ç–∞</label>
          </ToggleSwitch>

          {settings.botEnabled && (
            <BotSettings>
              <FormGroup>
                <Label>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</Label>
                <TextArea
                  value={settings.welcomeMessage}
                  onChange={(e) => handleInputChange('welcomeMessage', e.target.value)}
                  placeholder="–°–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º"
                />
                <HelpText>–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∂–¥–æ–º—É –Ω–æ–≤–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É –∫–ª—É–±–∞</HelpText>
                <BotMessagePreview>
                  <strong>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:</strong><br />
                  {settings.welcomeMessage}
                </BotMessagePreview>
              </FormGroup>

              <FormGroup>
                <Label>–°–æ–æ–±—â–µ–Ω–∏–µ-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ</Label>
                <TextArea
                  value={settings.invitationMessage}
                  onChange={(e) => handleInputChange('invitationMessage', e.target.value)}
                  placeholder="–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
                />
                <HelpText>–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</HelpText>
              </FormGroup>

              <FormGroup>
                <Label>–°–æ–æ–±—â–µ–Ω–∏–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏</Label>
                <TextArea
                  value={settings.thanksMessage}
                  onChange={(e) => handleInputChange('thanksMessage', e.target.value)}
                  placeholder="–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∫–ª—É–±"
                />
                <HelpText>–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∫–ª—É–±</HelpText>
              </FormGroup>
            </BotSettings>
          )}
        </SettingsSection>

        {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
        <SettingsSection
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.3, delay: 0.2 }}
        >
          <SectionTitle>
            <BellIcon />
            –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
          </SectionTitle>
          
          <Checkbox>
            <input
              type="checkbox"
              checked={settings.emailNotifications}
              onChange={(e) => handleInputChange('emailNotifications', e.target.checked)}
            />
            <label>Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</label>
          </Checkbox>

          <Checkbox>
            <input
              type="checkbox"
              checked={settings.pushNotifications}
              onChange={(e) => handleInputChange('pushNotifications', e.target.checked)}
            />
            <label>Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</label>
          </Checkbox>

          <Checkbox>
            <input
              type="checkbox"
              checked={settings.eventReminders}
              onChange={(e) => handleInputChange('eventReminders', e.target.checked)}
            />
            <label>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö</label>
          </Checkbox>

          <HelpText>
            –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–ª—É–±–∞
          </HelpText>
        </SettingsSection>

        {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ */}
        <SettingsSection
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.3, delay: 0.3 }}
        >
          <SectionTitle>
            <ShieldIcon />
            –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
          </SectionTitle>
          
          <Checkbox>
            <input
              type="checkbox"
              checked={settings.showMembersList}
              onChange={(e) => handleInputChange('showMembersList', e.target.checked)}
            />
            <label>–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</label>
          </Checkbox>

          <Checkbox>
            <input
              type="checkbox"
              checked={settings.allowDirectMessages}
              onChange={(e) => handleInputChange('allowDirectMessages', e.target.checked)}
            />
            <label>–†–∞–∑—Ä–µ—à–∏—Ç—å –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è</label>
          </Checkbox>

          <Checkbox>
            <input
              type="checkbox"
              checked={settings.requireApproval}
              onChange={(e) => handleInputChange('requireApproval', e.target.checked)}
            />
            <label>–¢—Ä–µ–±–æ–≤–∞—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∏—è –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è</label>
          </Checkbox>

          <HelpText>
            –≠—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–º–æ–≥—É—Ç –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å, –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É—é—Ç –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º
          </HelpText>
        </SettingsSection>
      </SettingsGrid>
    </Container>
  );
};

export default ClubSettingsInterface;
