import React, { useState, useEffect } from 'react';
import { clubApi } from '../services/clubApi';
import './EventParticipants.css';

const EventParticipants = ({ eventId, onClose }) => {
  const [participants, setParticipants] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedStatus, setSelectedStatus] = useState('all');

  useEffect(() => {
    if (eventId) {
      loadParticipants();
    }
  }, [eventId]);

  const loadParticipants = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const response = await clubApi.getEventParticipants(eventId);
      setParticipants(response.participants || []);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', error);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤');
    } finally {
      setLoading(false);
    }
  };

  const handleStatusChange = async (participantId, newStatus) => {
    try {
      await clubApi.updateParticipantStatus(eventId, participantId, newStatus);
      
      setParticipants(prev => 
        prev.map(participant => 
          participant.id === participantId 
            ? { ...participant, status: newStatus }
            : participant
        )
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞');
    }
  };

  const handleRemoveParticipant = async (participantId) => {
    if (!window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞?')) {
      return;
    }

    try {
      await clubApi.removeParticipant(eventId, participantId);
      setParticipants(prev => prev.filter(p => p.id !== participantId));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞');
    }
  };

  const getStatusLabel = (status) => {
    const statuses = {
      'pending': '–û–∂–∏–¥–∞–µ—Ç',
      'approved': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
      'rejected': '–û—Ç–∫–ª–æ–Ω–µ–Ω',
      'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
    };
    return statuses[status] || status;
  };

  const getStatusColor = (status) => {
    const colors = {
      'pending': '#f59e0b',
      'approved': '#10b981',
      'rejected': '#ef4444',
      'cancelled': '#6b7280'
    };
    return colors[status] || '#6b7280';
  };

  const filteredParticipants = participants.filter(participant => {
    const matchesSearch = 
      participant.user?.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      participant.user?.email?.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesStatus = selectedStatus === 'all' || participant.status === selectedStatus;
    
    return matchesSearch && matchesStatus;
  });

  const statusCounts = participants.reduce((acc, participant) => {
    acc[participant.status] = (acc[participant.status] || 0) + 1;
    return acc;
  }, {});

  if (loading) {
    return (
      <div className="event-participants-overlay">
        <div className="event-participants">
          <div className="participants-loading">
            <div className="loading-spinner"></div>
            <p>–ó–∞–≥—Ä—É–∑–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="event-participants-overlay">
      <div className="event-participants">
        <div className="participants-header">
          <h2>–£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–æ–±—ã—Ç–∏—è</h2>
          <button 
            className="close-button"
            onClick={onClose}
          >
            √ó
          </button>
        </div>

        {error && (
          <div className="error-message">
            {error}
          </div>
        )}

        {/* Statistics */}
        <div className="participants-stats">
          <div className="stat-item">
            <span className="stat-number">{participants.length}</span>
            <span className="stat-label">–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫</span>
          </div>
          <div className="stat-item">
            <span className="stat-number">{statusCounts.approved || 0}</span>
            <span className="stat-label">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ</span>
          </div>
          <div className="stat-item">
            <span className="stat-number">{statusCounts.pending || 0}</span>
            <span className="stat-label">–û–∂–∏–¥–∞–µ—Ç</span>
          </div>
        </div>

        {/* Filters */}
        <div className="participants-filters">
          <div className="filter-group">
            <input
              type="text"
              placeholder="–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ email..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="search-input"
            />
          </div>
          
          <div className="filter-group">
            <select
              value={selectedStatus}
              onChange={(e) => setSelectedStatus(e.target.value)}
              className="status-filter"
            >
              <option value="all">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
              <option value="pending">–û–∂–∏–¥–∞–µ—Ç</option>
              <option value="approved">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω</option>
              <option value="rejected">–û—Ç–∫–ª–æ–Ω–µ–Ω</option>
              <option value="cancelled">–û—Ç–º–µ–Ω–µ–Ω</option>
            </select>
          </div>
        </div>

        {/* Participants List */}
        <div className="participants-list">
          {filteredParticipants.length === 0 ? (
            <div className="no-participants">
              <div className="no-participants-icon">üë•</div>
              <p>–£—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
            </div>
          ) : (
            filteredParticipants.map(participant => (
              <div key={participant.id} className="participant-card">
                <div className="participant-info">
                  <div className="participant-avatar">
                    <img 
                      src={participant.user?.avatar || '/images/default-avatar.png'} 
                      alt={participant.user?.name}
                      onError={(e) => {
                        e.target.src = '/images/default-avatar.png';
                      }}
                    />
                  </div>
                  
                  <div className="participant-details">
                    <h4 className="participant-name">
                      {participant.user?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
                    </h4>
                    <p className="participant-email">
                      {participant.user?.email}
                    </p>
                    <p className="participant-date">
                      –ü–æ–¥–∞–ª –∑–∞—è–≤–∫—É: {new Date(participant.created_at).toLocaleDateString('ru-RU')}
                    </p>
                  </div>
                </div>

                <div className="participant-actions">
                  <div className="status-badge" style={{ backgroundColor: getStatusColor(participant.status) }}>
                    {getStatusLabel(participant.status)}
                  </div>
                  
                  <div className="action-buttons">
                    {participant.status === 'pending' && (
                      <>
                        <button
                          className="btn btn-success btn-sm"
                          onClick={() => handleStatusChange(participant.id, 'approved')}
                        >
                          ‚úì –û–¥–æ–±—Ä–∏—Ç—å
                        </button>
                        <button
                          className="btn btn-danger btn-sm"
                          onClick={() => handleStatusChange(participant.id, 'rejected')}
                        >
                          ‚úó –û—Ç–∫–ª–æ–Ω–∏—Ç—å
                        </button>
                      </>
                    )}
                    
                    {participant.status === 'approved' && (
                      <button
                        className="btn btn-warning btn-sm"
                        onClick={() => handleStatusChange(participant.id, 'cancelled')}
                      >
                        –û—Ç–º–µ–Ω–∏—Ç—å
                      </button>
                    )}
                    
                    <button
                      className="btn btn-danger btn-sm"
                      onClick={() => handleRemoveParticipant(participant.id)}
                    >
                      üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                    </button>
                  </div>
                </div>
              </div>
            ))
          )}
        </div>
      </div>
    </div>
  );
};

export default EventParticipants;
