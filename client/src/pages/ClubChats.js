import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { clubApi, clubAuth } from '../services/clubApi';
import { chatAPI } from '../services/api';
import toast from 'react-hot-toast';
import '../styles/ClubChats.css';

// –ò–∫–æ–Ω–∫–∏
const ChatBubbleLeftRightIcon = () => (
  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
    <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"/>
    <path d="M13 8H7"/>
    <path d="M17 12H7"/>
  </svg>
);

const CalendarIcon = () => (
  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
    <rect x="3" y="4" width="18" height="18" rx="2" ry="2"/>
    <line x1="16" y1="2" x2="16" y2="6"/>
    <line x1="8" y1="2" x2="8" y2="6"/>
    <line x1="3" y1="10" x2="21" y2="10"/>
  </svg>
);

const UserIcon = () => (
  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
    <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"/>
    <circle cx="12" cy="7" r="4"/>
  </svg>
);

const ClockIcon = () => (
  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
    <circle cx="12" cy="12" r="10"/>
    <polyline points="12,6 12,12 16,14"/>
  </svg>
);

const SearchIcon = () => (
  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
    <circle cx="11" cy="11" r="8"/>
    <path d="M21 21l-4.35-4.35"/>
  </svg>
);

const FilterIcon = () => (
  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
    <polygon points="22,3 2,3 10,12.46 10,19 14,21 14,12.46 22,3"/>
  </svg>
);

const EyeIcon = () => (
  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
    <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"/>
    <circle cx="12" cy="12" r="3"/>
  </svg>
);

const ClubChats = () => {
  const navigate = useNavigate();
  const [chats, setChats] = useState([]);
  const [events, setEvents] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState('');
  const [statusFilter, setStatusFilter] = useState('all');

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –∫–ª—É–±–∞
    if (!clubAuth.isAuthenticated()) {
      navigate('/club/login');
      return;
    }
    
    loadData();
  }, [navigate]);

  const loadData = async () => {
    try {
      setLoading(true);
      await Promise.all([
        loadChats(),
        loadEvents()
      ]);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö');
    } finally {
      setLoading(false);
    }
  };

  const loadChats = async () => {
    try {
      const chatsData = await clubApi.getClubChats();
      setChats(Array.isArray(chatsData.chats) ? chatsData.chats : (Array.isArray(chatsData) ? chatsData : []));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤:', error);
      setChats([]);
    }
  };

  const loadEvents = async () => {
    try {
      const eventsData = await clubApi.getEvents({ limit: 100 });
      setEvents(Array.isArray(eventsData.events) ? eventsData.events : (Array.isArray(eventsData) ? eventsData : []));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:', error);
      setEvents([]);
    }
  };

  const handleViewChat = (chat) => {
    console.log('Opening chat:', chat);
    
    if (!chat.id) {
      toast.error('–û—à–∏–±–∫–∞: ID —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —á–∞—Ç—É –∫–ª—É–±–∞ —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
    navigate(`/club/chat/${chat.id}`, {
      state: {
        chatData: {
          id: chat.id,
          event_id: chat.event_id,
          user_id: chat.user_id,
          user: chat.user,
          event_title: chat.event_title,
          club_id: chat.club_id
        }
      }
    });
  };

  const getEventTitle = (eventId) => {
    const event = events.find(e => e.id === eventId);
    return event ? event.title : `–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ #${eventId}`;
  };

  const getStatusText = (status) => {
    const statusMap = {
      'confirmed': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
      'pending': '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
      'cancelled': '–û—Ç–º–µ–Ω–µ–Ω',
      'attended': '–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª',
      'no_show': '–ù–µ —è–≤–∏–ª—Å—è',
      'unknown': '–ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω',
      'invited': '–ü—Ä–∏–≥–ª–∞—à–µ–Ω',
      'maybe': '–í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏–¥–µ—Ç',
      'declined': '–û—Ç–∫–ª–æ–Ω–∏–ª'
    };
    return statusMap[status] || '–°—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω';
  };

  const getStatusClass = (status) => {
    const classMap = {
      'confirmed': 'status-confirmed',
      'pending': 'status-pending',
      'cancelled': 'status-cancelled',
      'attended': 'status-attended',
      'no_show': 'status-no-show',
      'unknown': 'status-unknown',
      'invited': 'status-invited',
      'maybe': 'status-maybe',
      'declined': 'status-declined'
    };
    return classMap[status] || 'status-unknown';
  };

  const filteredChats = chats.filter(chat => {
    const matchesSearch = chat.user?.login?.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         chat.user?.email?.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         getEventTitle(chat.event_id).toLowerCase().includes(searchQuery.toLowerCase());
    const matchesStatus = statusFilter === 'all' || chat.participation_status === statusFilter;
    return matchesSearch && matchesStatus;
  });

  if (loading) {
    return (
      <div className="club-chats-loading">
        <div className="loading-spinner"></div>
        <p>–ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤...</p>
      </div>
    );
  }

  return (
    <div className="club-chats">
      {/* Header */}
      <div className="chats-header">
        <div className="chats-header-content">
          <div className="header-content">
            <h1>–ß–∞—Ç—ã —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏</h1>
            <p>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –≤–∞—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π</p>
          </div>
          <Link to="/club/dashboard" className="btn btn-secondary">
            ‚Üê –ù–∞–∑–∞–¥ –∫ –¥–∞—à–±–æ—Ä–¥—É
          </Link>
        </div>
      </div>

      {/* Stats */}
      <div className="chats-stats">
        <div className="stat-card">
          <h3>–í—Å–µ–≥–æ —á–∞—Ç–æ–≤</h3>
          <span className="stat-number">{chats.length}</span>
        </div>
        <div className="stat-card">
          <h3>–ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤</h3>
          <span className="stat-number">{chats.filter(chat => chat.last_message_at).length}</span>
        </div>
        <div className="stat-card">
          <h3>–ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π</h3>
          <span className="stat-number">{chats.reduce((sum, chat) => sum + (chat.unread_count || 0), 0)}</span>
        </div>
        <div className="stat-card">
          <h3>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π</h3>
          <span className="stat-number">{events.length}</span>
        </div>
      </div>

      {/* Filters */}
      <div className="chats-filters">
        <div className="search-box">
          <SearchIcon className="search-icon" />
          <input
            type="text"
            placeholder="–ü–æ–∏—Å–∫ –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
          />
        </div>
        
        <div className="filter-group">
          <div className="filter-item">
            <FilterIcon className="filter-icon" />
            <select
              value={statusFilter}
              onChange={(e) => setStatusFilter(e.target.value)}
            >
              <option value="all">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
              <option value="confirmed">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω</option>
              <option value="pending">–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</option>
              <option value="cancelled">–û—Ç–º–µ–Ω–µ–Ω</option>
              <option value="attended">–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª</option>
              <option value="no_show">–ù–µ —è–≤–∏–ª—Å—è</option>
              <option value="unknown">–ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω</option>
              <option value="invited">–ü—Ä–∏–≥–ª–∞—à–µ–Ω</option>
              <option value="maybe">–í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏–¥–µ—Ç</option>
              <option value="declined">–û—Ç–∫–ª–æ–Ω–∏–ª</option>
            </select>
          </div>
        </div>
      </div>

      {/* Chats List */}
      <div className="chats-content">
        {filteredChats.length === 0 ? (
          <div className="empty-state">
            <div className="empty-icon">üí¨</div>
            <h3>–ù–µ—Ç —á–∞—Ç–æ–≤</h3>
            <p>
              {searchQuery || statusFilter !== 'all'
                ? '–ù–µ –Ω–∞–π–¥–µ–Ω–æ —á–∞—Ç–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º'
                : '–ü–æ–∫–∞ –Ω–µ—Ç —á–∞—Ç–æ–≤ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π'
              }
            </p>
          </div>
        ) : (
          <div className="chats-grid">
            {filteredChats.map((chat, index) => (
              <div key={`${chat.id}-${chat.event_id}-${chat.user_id}-${index}`} className="chat-card">
                <div className="chat-header">
                  <div className="chat-user-info">
                    <div className="user-avatar">
                      <img
                        src={chat.user?.ava ? `/uploads/${chat.user.ava}` : '/uploads/no_photo.jpg'}
                        alt={chat.user?.login}
                        onError={(e) => {
                          e.target.src = '/uploads/no_photo.jpg';
                        }}
                      />
                    </div>
                    <div className="user-details">
                      <h3>@{chat.user?.login || chat.user_id || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</h3>
                      <p className="user-email">{chat.user?.email || 'Email –Ω–µ —É–∫–∞–∑–∞–Ω'}</p>
                    </div>
                  </div>
                  <div className="chat-status">
                    <span className={`status-badge ${getStatusClass(chat.participation_status)}`}>
                      {getStatusText(chat.participation_status)}
                    </span>
                  </div>
                </div>
                
                <div className="chat-content">
                  <div className="event-info">
                    <div className="event-title">
                      <CalendarIcon className="icon" />
                      <span>{getEventTitle(chat.event_id)}</span>
                    </div>
                    <div className="event-date">
                      <ClockIcon className="icon" />
                      <span>
                        {chat.event_date ? new Date(chat.event_date).toLocaleDateString('ru-RU', {
                          day: 'numeric',
                          month: 'long',
                          year: 'numeric'
                        }) : '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
                      </span>
                    </div>
                  </div>
                  
                  {chat.last_message && (
                    <div className="last-message">
                      <p className="message-preview">
                        {chat.last_message.length > 100 
                          ? `${chat.last_message.substring(0, 100)}...` 
                          : chat.last_message
                        }
                      </p>
                      <span className="message-time">
                        {chat.last_message_at ? new Date(chat.last_message_at).toLocaleString('ru-RU') : '–í—Ä–µ–º—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                      </span>
                    </div>
                  )}
                  
                  {chat.unread_count > 0 && (
                    <div className="unread-badge">
                      {chat.unread_count}
                    </div>
                  )}
                </div>
                
                <div className="chat-actions">
                  <button
                    className="btn btn-primary"
                    onClick={() => handleViewChat(chat)}
                  >
                    <EyeIcon className="icon" />
                    –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default ClubChats;
