import React, { useState, useEffect } from 'react';
import { useParams, Link } from 'react-router-dom';
import { api } from '../services/api';
import { clubApi } from '../services/clubApi';
import EventApplication from '../components/EventApplication';
import toast from 'react-hot-toast';
import './PublicClubDetail.css';

const PublicClubDetail = () => {
  const { id } = useParams();
  const [club, setClub] = useState(null);
  const [events, setEvents] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [activeTab, setActiveTab] = useState('info');
  const [showApplicationForm, setShowApplicationForm] = useState(false);
  const [selectedEvent, setSelectedEvent] = useState(null);

  useEffect(() => {
    if (id) {
      loadClubData();
    }
  }, [id]);

  const loadClubData = async () => {
    try {
      setLoading(true);
      setError(null);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª—É–±–∞
      const clubResponse = await api.clubs.getClub(id);
      setClub(clubResponse.club || clubResponse);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∫–ª—É–±–∞
      try {
        const eventsResponse = await clubApi.getEvents({ club_id: id, limit: 10 });
        setEvents(eventsResponse.events || []);
      } catch (eventsError) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–±—ã—Ç–∏—è:', eventsError);
        setEvents([]);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª—É–±–∞:', error);
      setError('–ö–ª—É–± –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
    } finally {
      setLoading(false);
    }
  };

  const getClubTypeLabel = (type) => {
    const types = {
      'nightclub': '–ù–æ—á–Ω–æ–π –∫–ª—É–±',
      'restaurant': '–†–µ—Å—Ç–æ—Ä–∞–Ω',
      'event_space': 'Event Space',
      'other': '–î—Ä—É–≥–æ–µ'
    };
    return types[type] || '–ö–ª—É–±';
  };

  const getClubTypeIcon = (type) => {
    switch (type) {
      case 'nightclub':
        return 'üéµ';
      case 'restaurant':
        return 'üçΩÔ∏è';
      case 'event_space':
        return 'üè¢';
      default:
        return 'üèõÔ∏è';
    }
  };

  const formatEventDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', {
      day: 'numeric',
      month: 'long',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const handleApplyToEvent = (event) => {
    setSelectedEvent(event);
    setShowApplicationForm(true);
  };

  const handleCloseApplicationForm = () => {
    setShowApplicationForm(false);
    setSelectedEvent(null);
  };

  const handleApplicationSuccess = () => {
    toast.success('–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞–Ω–∞! –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –µ—ë –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
  };

  if (loading) {
    return (
      <div className="public-club-detail-loading">
        <div className="loading-spinner"></div>
        <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª—É–±–µ...</p>
      </div>
    );
  }

  if (error || !club) {
    return (
      <div className="public-club-detail-error">
        <h2>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h2>
        <p>{error || '–ö–ª—É–± –Ω–µ –Ω–∞–π–¥–µ–Ω'}</p>
        <Link to="/clubs" className="btn btn-primary">
          –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–ª—É–±–æ–≤
        </Link>
      </div>
    );
  }

  return (
    <div className="public-club-detail">
      {/* Header */}
      <div className="club-detail-header">
        <div className="club-detail-back">
          <Link to="/clubs" className="back-link">
            ‚Üê –ù–∞–∑–∞–¥ –∫ –∫–ª—É–±–∞–º
          </Link>
        </div>
        
        <div className="club-detail-hero">
          <div className="club-hero-avatar">
            <img 
              src={club.avatar ? `/uploads/${club.avatar}` : '/uploads/no_photo.jpg'} 
              alt={club.name}
              onError={(e) => {
                e.target.src = '/uploads/no_photo.jpg';
              }}
            />
          </div>
          
          <div className="club-hero-info">
            <div className="club-type-badge">
              <span className="club-type-icon">{getClubTypeIcon(club.type)}</span>
              <span className="club-type-label">{getClubTypeLabel(club.type)}</span>
            </div>
            
            <h1 className="club-hero-name">{club.name}</h1>
            
            <div className="club-hero-location">
              <span className="location-icon">üìç</span>
              <span className="location-text">
                {club.city}, {club.country}
              </span>
            </div>
            
            {club.website && (
              <div className="club-hero-website">
                <a 
                  href={club.website} 
                  target="_blank" 
                  rel="noopener noreferrer"
                  className="website-link"
                >
                  üåê {club.website}
                </a>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Tabs */}
      <div className="club-detail-tabs">
        <button 
          className={`tab-button ${activeTab === 'info' ? 'active' : ''}`}
          onClick={() => setActiveTab('info')}
        >
          –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        </button>
        <button 
          className={`tab-button ${activeTab === 'events' ? 'active' : ''}`}
          onClick={() => setActiveTab('events')}
        >
          –°–æ–±—ã—Ç–∏—è ({events.length})
        </button>
      </div>

      {/* Content */}
      <div className="club-detail-content">
        {activeTab === 'info' && (
          <div className="club-info-tab">
            <div className="club-description">
              <h3>–û –∫–ª—É–±–µ</h3>
              <p>
                {club.description || '–û–ø–∏—Å–∞–Ω–∏–µ –∫–ª—É–±–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ.'}
              </p>
            </div>
            
            <div className="club-contact">
              <h3>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
              {club.email && (
                <div className="contact-item">
                  <strong>Email:</strong> {club.email}
                </div>
              )}
              {club.contact_info && (
                <div className="contact-item">
                  <strong>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã:</strong> {club.contact_info}
                </div>
              )}
              {club.website && (
                <div className="contact-item">
                  <strong>–í–µ–±-—Å–∞–π—Ç:</strong> 
                  <a href={club.website.startsWith('http') ? club.website : `https://${club.website}`} 
                     target="_blank" 
                     rel="noopener noreferrer"
                     className="website-link">
                    {club.website}
                  </a>
                </div>
              )}
            </div>
            
            <div className="club-details">
              <h3>–î–µ—Ç–∞–ª–∏</h3>
              <div className="details-grid">
                <div className="detail-item">
                  <span className="detail-label">–¢–∏–ø:</span>
                  <span className="detail-value">{getClubTypeLabel(club.type)}</span>
                </div>
                <div className="detail-item">
                  <span className="detail-label">–ì–æ—Ä–æ–¥:</span>
                  <span className="detail-value">{club.city}</span>
                </div>
                <div className="detail-item">
                  <span className="detail-label">–°—Ç—Ä–∞–Ω–∞:</span>
                  <span className="detail-value">{club.country}</span>
                </div>
                {club.address && (
                  <div className="detail-item">
                    <span className="detail-label">–ê–¥—Ä–µ—Å:</span>
                    <span className="detail-value">{club.address}</span>
                  </div>
                )}
                <div className="detail-item">
                  <span className="detail-label">–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</span>
                  <span className="detail-value">
                    {club.date_created ? new Date(club.date_created).toLocaleDateString('ru-RU') : '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
                  </span>
                </div>
              </div>
            </div>
          </div>
        )}
        
        {activeTab === 'events' && (
          <div className="club-events-tab">
            <h3>–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è</h3>
            
            {events.length === 0 ? (
              <div className="no-events">
                <div className="no-events-icon">üìÖ</div>
                <p>–£ —ç—Ç–æ–≥–æ –∫–ª—É–±–∞ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π</p>
              </div>
            ) : (
              <div className="events-list">
                {events.map(event => (
                  <div key={event.id} className="event-card">
                    <div className="event-date">
                      {formatEventDate(event.date)}
                    </div>
                    <div className="event-info">
                      <h4 className="event-title">{event.title}</h4>
                      {event.description && (
                        <p className="event-description">{event.description}</p>
                      )}
                      <div className="event-details">
                        <span className="event-participants">
                          {event.max_participants ? `–î–æ ${event.max_participants} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤` : '–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π'}
                        </span>
                      </div>
                      
                      <div className="event-actions">
                        <button 
                          className="btn btn-primary btn-sm"
                          onClick={() => handleApplyToEvent(event)}
                        >
                          –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É
                        </button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        )}
      </div>

      {/* Event Application Modal */}
      {showApplicationForm && selectedEvent && (
        <EventApplication
          event={selectedEvent}
          onClose={handleCloseApplicationForm}
          onSuccess={handleApplicationSuccess}
        />
      )}
    </div>
  );
};

export default PublicClubDetail;
