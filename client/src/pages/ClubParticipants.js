import React, { useState, useEffect } from 'react';
import { clubApi } from '../services/clubApi';
import '../styles/ClubParticipants.css';

// –ò–∫–æ–Ω–∫–∏
const UserIcon = () => (
  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
    <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"/>
    <circle cx="12" cy="7" r="4"/>
  </svg>
);

const CrownIcon = () => (
  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
    <path d="M2 4l3 12h14l3-12-6 7-4-7-4 7-6-7z"/>
    <path d="M6 16h12"/>
  </svg>
);

const ShieldIcon = () => (
  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
    <path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"/>
  </svg>
);

const MailIcon = () => (
  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
    <path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"/>
    <polyline points="22,6 12,13 2,6"/>
  </svg>
);

const CalendarIcon = () => (
  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
    <rect x="3" y="4" width="18" height="18" rx="2" ry="2"/>
    <line x1="16" y1="2" x2="16" y2="6"/>
    <line x1="8" y1="2" x2="8" y2="6"/>
    <line x1="3" y1="10" x2="21" y2="10"/>
  </svg>
);

const SearchIcon = () => (
  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
    <circle cx="11" cy="11" r="8"/>
    <path d="M21 21l-4.35-4.35"/>
  </svg>
);

const FilterIcon = () => (
  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
    <polygon points="22,3 2,3 10,12.46 10,19 14,21 14,12.46 22,3"/>
  </svg>
);

const ClubParticipants = () => {
  const [participants, setParticipants] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterRole, setFilterRole] = useState('all');
  const [filterStatus, setFilterStatus] = useState('all');
  const [selectedParticipant, setSelectedParticipant] = useState(null);
  const [showModal, setShowModal] = useState(false);

  useEffect(() => {
    loadParticipants();
  }, []);

  const loadParticipants = async () => {
    try {
      setLoading(true);
      const response = await clubApi.getParticipants();
      setParticipants(Array.isArray(response.participants) ? response.participants : (Array.isArray(response) ? response : []));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', error);
      setParticipants([]);
    } finally {
      setLoading(false);
    }
  };

  const handleViewParticipant = (participant) => {
    setSelectedParticipant(participant);
    setShowModal(true);
  };

  const handleChangeRole = async (participantId, newRole) => {
    if (window.confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞?`)) {
      try {
        await clubApi.updateParticipantRole(participantId, newRole);
        await loadParticipants();
        setShowModal(false);
        setSelectedParticipant(null);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞');
      }
    }
  };

  const handleRemoveParticipant = async (participantId) => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏—Å–∫–ª—é—á–∏—Ç—å —ç—Ç–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –∫–ª—É–±–∞?')) {
      try {
        await clubApi.removeParticipant(participantId);
        await loadParticipants();
        setShowModal(false);
        setSelectedParticipant(null);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞');
      }
    }
  };

  const getRoleBadge = (role) => {
    const roleMap = {
      'owner': { text: '–í–ª–∞–¥–µ–ª–µ—Ü', class: 'role-owner', icon: <CrownIcon /> },
      'admin': { text: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', class: 'role-admin', icon: <ShieldIcon /> },
      'moderator': { text: '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä', class: 'role-moderator', icon: <ShieldIcon /> },
      'member': { text: '–£—á–∞—Å—Ç–Ω–∏–∫', class: 'role-member', icon: <UserIcon /> }
    };
    
    const roleInfo = roleMap[role] || { text: role, class: 'role-unknown', icon: <UserIcon /> };
    return (
      <span className={`role-badge ${roleInfo.class}`}>
        {roleInfo.icon}
        {roleInfo.text}
      </span>
    );
  };

  const getStatusBadge = (status) => {
    const statusMap = {
      'active': { text: '–ê–∫—Ç–∏–≤–µ–Ω', class: 'status-active' },
      'inactive': { text: '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω', class: 'status-inactive' },
      'banned': { text: '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', class: 'status-banned' }
    };
    
    const statusInfo = statusMap[status] || { text: status, class: 'status-unknown' };
    return <span className={`status-badge ${statusInfo.class}`}>{statusInfo.text}</span>;
  };

  const filteredParticipants = participants.filter(participant => {
    const matchesSearch = !searchTerm || 
      (participant.user?.name && participant.user.name.toLowerCase().includes(searchTerm.toLowerCase())) ||
      (participant.user?.login && participant.user.login.toLowerCase().includes(searchTerm.toLowerCase())) ||
      (participant.user?.email && participant.user.email.toLowerCase().includes(searchTerm.toLowerCase()));
    
    const matchesRole = filterRole === 'all' || participant.role === filterRole;
    const matchesStatus = filterStatus === 'all' || participant.status === filterStatus;
    
    return matchesSearch && matchesRole && matchesStatus;
  });

  if (loading) {
    return (
      <div className="club-participants">
        <div className="loading">
          <div className="spinner"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="club-participants">
      <div className="page-header">
        <div className="header-content">
          <h1>–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–ª—É–±–∞</h1>
          <p>–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∏ –∏—Ö —Ä–æ–ª—è–º–∏ –≤ –∫–ª—É–±–µ</p>
        </div>
      </div>

      <div className="participants-stats">
        <div className="stat-card">
          <h3>–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</h3>
          <span className="stat-number">{participants.length}</span>
        </div>
        <div className="stat-card">
          <h3>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤</h3>
          <span className="stat-number">{participants.filter(p => p.role === 'admin' || p.role === 'owner').length}</span>
        </div>
        <div className="stat-card">
          <h3>–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤</h3>
          <span className="stat-number">{participants.filter(p => p.role === 'moderator').length}</span>
        </div>
        <div className="stat-card">
          <h3>–ê–∫—Ç–∏–≤–Ω—ã—Ö</h3>
          <span className="stat-number">{participants.filter(p => p.status === 'active').length}</span>
        </div>
      </div>

      <div className="participants-filters">
        <div className="search-box">
          <SearchIcon className="search-icon" />
          <input
            type="text"
            placeholder="–ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </div>
        
        <div className="filter-controls">
          <div className="filter-group">
            <FilterIcon className="filter-icon" />
            <select value={filterRole} onChange={(e) => setFilterRole(e.target.value)}>
              <option value="all">–í—Å–µ —Ä–æ–ª–∏</option>
              <option value="owner">–í–ª–∞–¥–µ–ª–µ—Ü</option>
              <option value="admin">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</option>
              <option value="moderator">–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä</option>
              <option value="member">–£—á–∞—Å—Ç–Ω–∏–∫</option>
            </select>
          </div>
          
          <div className="filter-group">
            <select value={filterStatus} onChange={(e) => setFilterStatus(e.target.value)}>
              <option value="all">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
              <option value="active">–ê–∫—Ç–∏–≤–Ω—ã–µ</option>
              <option value="inactive">–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ</option>
              <option value="banned">–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ</option>
            </select>
          </div>
        </div>
      </div>

      <div className="participants-content">
        {filteredParticipants.length === 0 ? (
          <div className="empty-state">
            <div className="empty-icon">üë•</div>
            <h3>–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</h3>
            <p>
              {searchTerm || filterRole !== 'all' || filterStatus !== 'all'
                ? '–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É —É—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
                : '–í –∫–ª—É–±–µ –ø–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'
              }
            </p>
          </div>
        ) : (
          <div className="participants-list">
            {filteredParticipants.map((participant) => (
              <div key={participant.id} className="participant-card">
                <div className="participant-header">
                  <div className="user-info">
                    <div className="user-avatar">
                      {participant.user?.avatar ? (
                        <img src={participant.user.avatar} alt={participant.user.name || participant.user.login} />
                      ) : (
                        <UserIcon />
                      )}
                    </div>
                    <div className="user-details">
                      <h3>{participant.user?.name || participant.user?.login || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</h3>
                      <p>{participant.user?.email || 'Email –Ω–µ —É–∫–∞–∑–∞–Ω'}</p>
                    </div>
                  </div>
                  <div className="participant-badges">
                    {getRoleBadge(participant.role)}
                    {getStatusBadge(participant.status)}
                  </div>
                </div>

                <div className="participant-content">
                  <div className="participant-stats">
                    <div className="stat-item">
                      <CalendarIcon className="icon" />
                      <span>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: {new Date(participant.joined_at).toLocaleDateString('ru-RU')}</span>
                    </div>
                    {participant.events_attended && (
                      <div className="stat-item">
                        <span>–°–æ–±—ã—Ç–∏–π –ø–æ—Å–µ—â–µ–Ω–æ: {participant.events_attended}</span>
                      </div>
                    )}
                    {participant.last_activity && (
                      <div className="stat-item">
                        <span>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {new Date(participant.last_activity).toLocaleDateString('ru-RU')}</span>
                      </div>
                    )}
                  </div>
                </div>

                <div className="participant-footer">
                  <div className="participant-actions">
                    <button 
                      className="btn btn-secondary"
                      onClick={() => handleViewParticipant(participant)}
                    >
                      –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                    </button>
                    
                    {participant.role !== 'owner' && (
                      <button 
                        className="btn btn-danger"
                        onClick={() => handleRemoveParticipant(participant.id)}
                      >
                        –ò—Å–∫–ª—é—á–∏—Ç—å
                      </button>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {showModal && selectedParticipant && (
        <div className="modal-overlay">
          <div className="modal-content">
            <ParticipantModal
              participant={selectedParticipant}
              onClose={() => {
                setShowModal(false);
                setSelectedParticipant(null);
              }}
              onChangeRole={handleChangeRole}
              onRemove={handleRemoveParticipant}
            />
          </div>
        </div>
      )}
    </div>
  );
};

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ
const ParticipantModal = ({ participant, onClose, onChangeRole, onRemove }) => {
  const [showRoleChange, setShowRoleChange] = useState(false);
  const [newRole, setNewRole] = useState(participant.role);

  const handleRoleChange = () => {
    onChangeRole(participant.id, newRole);
    setShowRoleChange(false);
  };

  return (
    <div className="participant-modal">
      <div className="modal-header">
        <h2>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ</h2>
        <button className="close-btn" onClick={onClose}>√ó</button>
      </div>

      <div className="modal-body">
        <div className="user-profile">
          <div className="user-avatar-large">
            {participant.user?.avatar ? (
              <img src={participant.user.avatar} alt={participant.user.name || participant.user.login} />
            ) : (
              <UserIcon />
            )}
          </div>
          <div className="user-info">
            <h3>{participant.user?.name || participant.user?.login || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</h3>
            <p>{participant.user?.email || 'Email –Ω–µ —É–∫–∞–∑–∞–Ω'}</p>
            {participant.user?.age && <p>–í–æ–∑—Ä–∞—Å—Ç: {participant.user.age}</p>}
            {participant.user?.location && <p>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {participant.user.location}</p>}
          </div>
        </div>

        <div className="participant-details">
          <div className="detail-section">
            <h4>–†–æ–ª—å –≤ –∫–ª—É–±–µ</h4>
            <div className="role-section">
              <span className={`role-badge role-${participant.role}`}>
                {participant.role === 'owner' ? <CrownIcon /> : 
                 participant.role === 'admin' || participant.role === 'moderator' ? <ShieldIcon /> : <UserIcon />}
                {participant.role === 'owner' ? '–í–ª–∞–¥–µ–ª–µ—Ü' :
                 participant.role === 'admin' ? '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' :
                 participant.role === 'moderator' ? '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä' : '–£—á–∞—Å—Ç–Ω–∏–∫'}
              </span>
              
              {participant.role !== 'owner' && (
                <button 
                  className="btn btn-sm btn-secondary"
                  onClick={() => setShowRoleChange(!showRoleChange)}
                >
                  –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å
                </button>
              )}
            </div>
            
            {showRoleChange && (
              <div className="role-change-form">
                <select value={newRole} onChange={(e) => setNewRole(e.target.value)}>
                  <option value="member">–£—á–∞—Å—Ç–Ω–∏–∫</option>
                  <option value="moderator">–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä</option>
                  <option value="admin">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</option>
                </select>
                <div className="form-actions">
                  <button className="btn btn-sm btn-primary" onClick={handleRoleChange}>
                    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                  </button>
                  <button className="btn btn-sm btn-secondary" onClick={() => setShowRoleChange(false)}>
                    –û—Ç–º–µ–Ω–∞
                  </button>
                </div>
              </div>
            )}
          </div>

          <div className="detail-section">
            <h4>–°—Ç–∞—Ç—É—Å</h4>
            <span className={`status-badge status-${participant.status}`}>
              {participant.status === 'active' ? '–ê–∫—Ç–∏–≤–µ–Ω' :
               participant.status === 'inactive' ? '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω' : '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}
            </span>
          </div>

          <div className="detail-section">
            <h4>–î–∞—Ç–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è</h4>
            <p>{new Date(participant.joined_at).toLocaleString('ru-RU')}</p>
          </div>

          {participant.events_attended && (
            <div className="detail-section">
              <h4>–°–æ–±—ã—Ç–∏–π –ø–æ—Å–µ—â–µ–Ω–æ</h4>
              <p>{participant.events_attended}</p>
            </div>
          )}

          {participant.last_activity && (
            <div className="detail-section">
              <h4>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</h4>
              <p>{new Date(participant.last_activity).toLocaleString('ru-RU')}</p>
            </div>
          )}

          {participant.bio && (
            <div className="detail-section">
              <h4>–û —Å–µ–±–µ</h4>
              <p>{participant.bio}</p>
            </div>
          )}
        </div>
      </div>

      <div className="modal-footer">
        <button className="btn btn-secondary" onClick={onClose}>
          –ó–∞–∫—Ä—ã—Ç—å
        </button>
        
        {participant.role !== 'owner' && (
          <button className="btn btn-danger" onClick={() => onRemove(participant.id)}>
            –ò—Å–∫–ª—é—á–∏—Ç—å –∏–∑ –∫–ª—É–±–∞
          </button>
        )}
      </div>
    </div>
  );
};

export default ClubParticipants;
