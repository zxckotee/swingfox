import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import ClubCard from '../components/ClubCard';
import { api } from '../services/api';
import './PublicClubs.css';

const PublicClubs = () => {
  const [clubs, setClubs] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedType, setSelectedType] = useState('all');
  const [selectedCity, setSelectedCity] = useState('all');

  useEffect(() => {
    loadClubs();
  }, [searchTerm, selectedType, selectedCity]);

  const loadClubs = async () => {
    try {
      setLoading(true);
      setError(null);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—É–±–æ–≤
      const response = await api.clubs.getClubs({
        limit: 50,
        search: searchTerm,
        type: selectedType !== 'all' ? selectedType : undefined,
        city: selectedCity !== 'all' ? selectedCity : undefined
      });
      
      setClubs(response.clubs || []);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª—É–±–æ–≤:', error);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª—É–±–æ–≤');
    } finally {
      setLoading(false);
    }
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º clubs –Ω–∞–ø—Ä—è–º—É—é
  const filteredClubs = clubs;

  const getClubTypes = () => {
    const types = [...new Set(clubs.map(club => club.type).filter(Boolean))];
    return types.map(type => ({
      value: type,
      label: getClubTypeLabel(type)
    }));
  };

  const getClubTypeLabel = (type) => {
    const types = {
      'nightclub': '–ù–æ—á–Ω—ã–µ –∫–ª—É–±—ã',
      'restaurant': '–†–µ—Å—Ç–æ—Ä–∞–Ω—ã',
      'event_space': 'Event Space',
      'other': '–î—Ä—É–≥–æ–µ'
    };
    return types[type] || '–ö–ª—É–±';
  };

  const getCities = () => {
    const cities = [...new Set(clubs.map(club => club.city).filter(Boolean))];
    return cities.sort();
  };

  if (loading) {
    return (
      <div className="public-clubs-loading">
        <div className="loading-spinner"></div>
        <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—É–±–æ–≤...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="public-clubs-error">
        <h2>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h2>
        <p>{error}</p>
        <button onClick={loadClubs} className="btn btn-primary">
          –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        </button>
      </div>
    );
  }

  return (
    <div className="public-clubs">
      <div className="public-clubs-header">
        <h1>–ö–ª—É–±—ã –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</h1>
        <p>–ù–∞–π–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞ –∏ —Å–æ–±—ã—Ç–∏—è –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ</p>
      </div>

      {/* Filters */}
      <div className="clubs-filters">
        <div className="filter-group">
          <label htmlFor="search">–ü–æ–∏—Å–∫</label>
          <input
            id="search"
            type="text"
            placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª—É–±–∞ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="filter-input"
          />
        </div>

        <div className="filter-group">
          <label htmlFor="type">–¢–∏–ø</label>
          <select
            id="type"
            value={selectedType}
            onChange={(e) => setSelectedType(e.target.value)}
            className="filter-select"
          >
            <option value="all">–í—Å–µ —Ç–∏–ø—ã</option>
            {getClubTypes().map(type => (
              <option key={type.value || 'unknown'} value={type.value}>
                {type.label}
              </option>
            ))}
          </select>
        </div>

        <div className="filter-group">
          <label htmlFor="city">–ì–æ—Ä–æ–¥</label>
          <select
            id="city"
            value={selectedCity}
            onChange={(e) => setSelectedCity(e.target.value)}
            className="filter-select"
          >
            <option value="all">–í—Å–µ –≥–æ—Ä–æ–¥–∞</option>
            {getCities().map(city => (
              <option key={city || 'unknown'} value={city}>
                {city}
              </option>
            ))}
          </select>
        </div>
      </div>

      {/* Results */}
      <div className="clubs-results">
        <div className="results-header">
          <h2>
            –ù–∞–π–¥–µ–Ω–æ –∫–ª—É–±–æ–≤: {filteredClubs.length}
            {filteredClubs.length !== clubs.length && (
              <span className="filtered-count">
                {' '}(–∏–∑ {clubs.length})
              </span>
            )}
          </h2>
        </div>

        {filteredClubs.length === 0 ? (
          <div className="no-clubs">
            <div className="no-clubs-icon">üèõÔ∏è</div>
            <h3>–ö–ª—É–±—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
            <p>
              {searchTerm || selectedType !== 'all' || selectedCity !== 'all' 
                ? '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞'
                : '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª—É–±–æ–≤'
              }
            </p>
            {(searchTerm || selectedType !== 'all' || selectedCity !== 'all') && (
              <button 
                onClick={() => {
                  setSearchTerm('');
                  setSelectedType('all');
                  setSelectedCity('all');
                }}
                className="btn btn-secondary"
              >
                –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
              </button>
            )}
          </div>
        ) : (
          <div className="clubs-grid">
            {filteredClubs.map(club => (
              <ClubCard key={club.id || `club-${Math.random()}`} club={club} />
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default PublicClubs;
