import React, { useState, useEffect } from 'react';
import { clubApi } from '../services/clubApi';
import '../styles/ClubApplications.css';

// –ò–∫–æ–Ω–∫–∏
const CheckIcon = () => (
  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
    <polyline points="20,6 9,17 4,12"/>
  </svg>
);

const XIcon = () => (
  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
    <line x1="18" y1="6" x2="6" y2="18"/>
    <line x1="6" y1="6" x2="18" y2="18"/>
  </svg>
);

const EyeIcon = () => (
  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
    <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"/>
    <circle cx="12" cy="12" r="3"/>
  </svg>
);

const ClockIcon = () => (
  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
    <circle cx="12" cy="12" r="10"/>
    <polyline points="12,6 12,12 16,14"/>
  </svg>
);

const UserIcon = () => (
  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
    <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"/>
    <circle cx="12" cy="7" r="4"/>
  </svg>
);

const ClubApplications = () => {
  const [applications, setApplications] = useState([]);
  const [loading, setLoading] = useState(true);
  const [selectedApplication, setSelectedApplication] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [filter, setFilter] = useState('all'); // all, pending, approved, rejected

  useEffect(() => {
    loadApplications();
  }, []);

  const loadApplications = async () => {
    try {
      setLoading(true);
      const response = await clubApi.getApplications();
      setApplications(Array.isArray(response.applications) ? response.applications : (Array.isArray(response) ? response : []));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫:', error);
      setApplications([]);
    } finally {
      setLoading(false);
    }
  };

  const handleViewApplication = (application) => {
    setSelectedApplication(application);
    setShowModal(true);
  };

  const handleApproveApplication = async (applicationId) => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–¥–æ–±—Ä–∏—Ç—å —ç—Ç—É –∑–∞—è–≤–∫—É?')) {
      try {
        await clubApi.approveApplication(applicationId);
        await loadApplications();
        setShowModal(false);
        setSelectedApplication(null);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏');
      }
    }
  };

  const handleRejectApplication = async (applicationId) => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —ç—Ç—É –∑–∞—è–≤–∫—É?')) {
      try {
        await clubApi.rejectApplication(applicationId);
        await loadApplications();
        setShowModal(false);
        setSelectedApplication(null);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏');
      }
    }
  };

  const getStatusBadge = (status) => {
    const statusMap = {
      'pending': { text: '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏', class: 'status-pending' },
      'approved': { text: '–û–¥–æ–±—Ä–µ–Ω–∞', class: 'status-approved' },
      'rejected': { text: '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞', class: 'status-rejected' }
    };
    
    const statusInfo = statusMap[status] || { text: status, class: 'status-unknown' };
    return <span className={`status-badge ${statusInfo.class}`}>{statusInfo.text}</span>;
  };

  const filteredApplications = applications.filter(app => {
    if (filter === 'all') return true;
    return app.status === filter;
  });

  if (loading) {
    return (
      <div className="club-applications">
        <div className="loading">
          <div className="spinner"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–æ–∫...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="club-applications">
      <div className="page-header">
        <div className="header-content">
          <h1>–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ</h1>
          <p>–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –∑–∞—è–≤–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–ª—É–±</p>
        </div>
      </div>

      <div className="applications-stats">
        <div className="stat-card">
          <h3>–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫</h3>
          <span className="stat-number">{applications.length}</span>
        </div>
        <div className="stat-card">
          <h3>–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏</h3>
          <span className="stat-number">{applications.filter(app => app.status === 'pending').length}</span>
        </div>
        <div className="stat-card">
          <h3>–û–¥–æ–±—Ä–µ–Ω–æ</h3>
          <span className="stat-number">{applications.filter(app => app.status === 'approved').length}</span>
        </div>
        <div className="stat-card">
          <h3>–û—Ç–∫–ª–æ–Ω–µ–Ω–æ</h3>
          <span className="stat-number">{applications.filter(app => app.status === 'rejected').length}</span>
        </div>
      </div>

      <div className="applications-filters">
        <div className="filter-tabs">
          <button 
            className={`filter-tab ${filter === 'all' ? 'active' : ''}`}
            onClick={() => setFilter('all')}
          >
            –í—Å–µ ({applications.length})
          </button>
          <button 
            className={`filter-tab ${filter === 'pending' ? 'active' : ''}`}
            onClick={() => setFilter('pending')}
          >
            –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ ({applications.filter(app => app.status === 'pending').length})
          </button>
          <button 
            className={`filter-tab ${filter === 'approved' ? 'active' : ''}`}
            onClick={() => setFilter('approved')}
          >
            –û–¥–æ–±—Ä–µ–Ω–æ ({applications.filter(app => app.status === 'approved').length})
          </button>
          <button 
            className={`filter-tab ${filter === 'rejected' ? 'active' : ''}`}
            onClick={() => setFilter('rejected')}
          >
            –û—Ç–∫–ª–æ–Ω–µ–Ω–æ ({applications.filter(app => app.status === 'rejected').length})
          </button>
        </div>
      </div>

      <div className="applications-content">
        {filteredApplications.length === 0 ? (
          <div className="empty-state">
            <div className="empty-icon">üìù</div>
            <h3>–ù–µ—Ç –∑–∞—è–≤–æ–∫</h3>
            <p>
              {filter === 'all' 
                ? '–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–ª—É–±'
                : `–ù–µ—Ç –∑–∞—è–≤–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "${filter === 'pending' ? '–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏' : filter === 'approved' ? '–æ–¥–æ–±—Ä–µ–Ω–æ' : '–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ'}"`
              }
            </p>
          </div>
        ) : (
          <div className="applications-list">
            {filteredApplications.map((application) => (
              <div key={application.id} className="application-card">
                <div className="application-header">
                  <div className="user-info">
                    <div className="user-avatar">
                      {application.user?.avatar ? (
                        <img src={application.user.avatar} alt={application.user.name || application.user.login} />
                      ) : (
                        <UserIcon />
                      )}
                    </div>
                    <div className="user-details">
                      <h3>{application.user?.name || application.user?.login || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</h3>
                      <p>{application.user?.email || 'Email –Ω–µ —É–∫–∞–∑–∞–Ω'}</p>
                    </div>
                  </div>
                  <div className="application-status">
                    {getStatusBadge(application.status)}
                  </div>
                </div>

                <div className="application-content">
                  <div className="application-message">
                    <h4>–°–æ–æ–±—â–µ–Ω–∏–µ:</h4>
                    <p>{application.message || '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
                  </div>
                  
                  {application.experience && (
                    <div className="application-experience">
                      <h4>–û–ø—ã—Ç:</h4>
                      <p>{application.experience}</p>
                    </div>
                  )}

                  {application.interests && (
                    <div className="application-interests">
                      <h4>–ò–Ω—Ç–µ—Ä–µ—Å—ã:</h4>
                      <p>{application.interests}</p>
                    </div>
                  )}
                </div>

                <div className="application-footer">
                  <div className="application-dates">
                    <div className="date-item">
                      <ClockIcon className="icon" />
                      <span>–ü–æ–¥–∞–Ω–∞: {new Date(application.created_at).toLocaleDateString('ru-RU')}</span>
                    </div>
                    {application.updated_at && application.updated_at !== application.created_at && (
                      <div className="date-item">
                        <span>–û–±–Ω–æ–≤–ª–µ–Ω–∞: {new Date(application.updated_at).toLocaleDateString('ru-RU')}</span>
                      </div>
                    )}
                  </div>
                  
                  <div className="application-actions">
                    <button 
                      className="btn btn-secondary"
                      onClick={() => handleViewApplication(application)}
                    >
                      <EyeIcon className="icon" />
                      –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                    </button>
                    
                    {application.status === 'pending' && (
                      <>
                        <button 
                          className="btn btn-success"
                          onClick={() => handleApproveApplication(application.id)}
                        >
                          <CheckIcon className="icon" />
                          –û–¥–æ–±—Ä–∏—Ç—å
                        </button>
                        <button 
                          className="btn btn-danger"
                          onClick={() => handleRejectApplication(application.id)}
                        >
                          <XIcon className="icon" />
                          –û—Ç–∫–ª–æ–Ω–∏—Ç—å
                        </button>
                      </>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {showModal && selectedApplication && (
        <div className="modal-overlay">
          <div className="modal-content">
            <ApplicationModal
              application={selectedApplication}
              onClose={() => {
                setShowModal(false);
                setSelectedApplication(null);
              }}
              onApprove={() => handleApproveApplication(selectedApplication.id)}
              onReject={() => handleRejectApplication(selectedApplication.id)}
            />
          </div>
        </div>
      )}
    </div>
  );
};

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞—è–≤–∫–µ
const ApplicationModal = ({ application, onClose, onApprove, onReject }) => {
  return (
    <div className="application-modal">
      <div className="modal-header">
        <h2>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ</h2>
        <button className="close-btn" onClick={onClose}>√ó</button>
      </div>

      <div className="modal-body">
        <div className="user-profile">
          <div className="user-avatar-large">
            {application.user?.avatar ? (
              <img src={application.user.avatar} alt={application.user.name || application.user.login} />
            ) : (
              <UserIcon />
            )}
          </div>
          <div className="user-info">
            <h3>{application.user?.name || application.user?.login || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</h3>
            <p>{application.user?.email || 'Email –Ω–µ —É–∫–∞–∑–∞–Ω'}</p>
            {application.user?.age && <p>–í–æ–∑—Ä–∞—Å—Ç: {application.user.age}</p>}
            {application.user?.location && <p>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {application.user.location}</p>}
          </div>
        </div>

        <div className="application-details">
          <div className="detail-section">
            <h4>–°–æ–æ–±—â–µ–Ω–∏–µ</h4>
            <p>{application.message || '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
          </div>

          {application.experience && (
            <div className="detail-section">
              <h4>–û–ø—ã—Ç</h4>
              <p>{application.experience}</p>
            </div>
          )}

          {application.interests && (
            <div className="detail-section">
              <h4>–ò–Ω—Ç–µ—Ä–µ—Å—ã</h4>
              <p>{application.interests}</p>
            </div>
          )}

          <div className="detail-section">
            <h4>–°—Ç–∞—Ç—É—Å</h4>
            <span className={`status-badge status-${application.status}`}>
              {application.status === 'pending' ? '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏' : 
               application.status === 'approved' ? '–û–¥–æ–±—Ä–µ–Ω–∞' : '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞'}
            </span>
          </div>

          <div className="detail-section">
            <h4>–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏</h4>
            <p>{new Date(application.created_at).toLocaleString('ru-RU')}</p>
          </div>
        </div>
      </div>

      <div className="modal-footer">
        <button className="btn btn-secondary" onClick={onClose}>
          –ó–∞–∫—Ä—ã—Ç—å
        </button>
        
        {application.status === 'pending' && (
          <>
            <button className="btn btn-success" onClick={onApprove}>
              <CheckIcon className="icon" />
              –û–¥–æ–±—Ä–∏—Ç—å
            </button>
            <button className="btn btn-danger" onClick={onReject}>
              <XIcon className="icon" />
              –û—Ç–∫–ª–æ–Ω–∏—Ç—å
            </button>
          </>
        )}
      </div>
    </div>
  );
};

export default ClubApplications;

