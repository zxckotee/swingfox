require('dotenv').config();
const express = require('express');
const https = require('https');
const fs = require('fs');
const cors = require('cors');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
const path = require('path');
const { createServer } = require('http');
const { Server } = require('socket.io');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const { sequelize, testConnection } = require('./src/config/database');

const app = express();
const PORT = process.env.PORT || 3001;

// –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Socket.IO
const httpServer = createServer(app);
const io = new Server(httpServer, {
  cors: {
    origin: process.env.NODE_ENV === 'production' 
      ? ['https://swingfox.ru', 'https://www.swingfox.ru', 'https://88.218.121.216', 'http://88.218.121.216']
      : true,
    credentials: true,
    methods: ['GET', 'POST']
  }
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
app.use(helmet());
app.use(cors({
  origin: process.env.NODE_ENV === 'production' 
    ? ['https://swingfox.ru', 'https://www.swingfox.ru', 'https://88.218.121.216', 'http://88.218.121.216']
    : true,
  credentials: true
}));

// Rate limiting
/*const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
  max: 100, // –º–∞–∫—Å–∏–º—É–º 100 –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–¥–Ω–æ–≥–æ IP
  message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —ç—Ç–æ–≥–æ IP, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
});
app.use('/api/', limiter);*/

// –ü–∞—Ä—Å–∏–Ω–≥ JSON
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è API)
app.use('/uploads', express.static(path.join(__dirname, 'public/uploads')));

// –ò–º–ø–æ—Ä—Ç —Ä–æ—É—Ç–æ–≤
const authRoutes = require('./src/routes/auth');
const userRoutes = require('./src/routes/users');
const swipeRoutes = require('./src/routes/swipe');
const catalogRoutes = require('./src/routes/catalog');
const chatRoutes = require('./src/routes/chat');
const adsRoutes = require('./src/routes/ads');
const adminRoutes = require('./src/routes/admin');
const geoRoutes = require('./src/routes/geo');
const uploadsRoutes = require('./src/routes/uploads');
const notificationsRoutes = require('./src/routes/notifications');
const giftsRoutes = require('./src/routes/gifts');
const clubsRoutes = require('./src/routes/clubs');
const subscriptionsRoutes = require('./src/routes/subscriptions');
const subscriptionPlansRoutes = require('./src/routes/subscription-plans');
const ratingRoutes = require('./src/routes/rating');
const profilesRoutes = require('./src/routes/profiles');
const photoCommentsRoutes = require('./src/routes/photo-comments');
const profileCommentsRoutes = require('./src/routes/profile-comments');
const reactionsRoutes = require('./src/routes/reactions');

// –ò–º–ø–æ—Ä—Ç —Ä–æ—É—Ç–æ–≤ –∫–ª—É–±–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
const clubAuthRoutes = require('./src/routes/clubAuth');
const clubEventsRoutes = require('./src/routes/clubEvents');
const clubAnalyticsRoutes = require('./src/routes/clubAnalytics');
const clubUserEventsRoutes = require('./src/routes/clubUserEvents');
const clubChatsRoutes = require('./src/routes/clubChats');

// –ò–º–ø–æ—Ä—Ç cron-–∑–∞–¥–∞—á –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫
const SubscriptionCron = require('./src/cron/subscriptionCron');
// –ò–º–ø–æ—Ä—Ç cron-–∑–∞–¥–∞—á –¥–ª—è –∫–ª—É–±–æ–≤
const ClubCron = require('./src/cron/clubCron');
// –ò–º–ø–æ—Ä—Ç middleware –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
const updateUserActivity = require('./src/middleware/updateActivity');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–æ–≤
app.use('/api/auth', authRoutes);

// Middleware –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–æ—É—Ç–æ–≤)
app.use('/api/users', updateUserActivity, userRoutes);
app.use('/api/swipe', updateUserActivity, swipeRoutes);
app.use('/api/catalog', updateUserActivity, catalogRoutes);
app.use('/api/chat', updateUserActivity, chatRoutes);
app.use('/api/ads', updateUserActivity, adsRoutes);
app.use('/api/admin', updateUserActivity, adminRoutes);
app.use('/api/geo', updateUserActivity, geoRoutes);
app.use('/api/uploads', updateUserActivity, uploadsRoutes);
app.use('/api/notifications', updateUserActivity, notificationsRoutes);
app.use('/api/gifts', updateUserActivity, giftsRoutes);
app.use('/api/clubs', updateUserActivity, clubsRoutes);
app.use('/api/subscriptions', updateUserActivity, subscriptionsRoutes);
app.use('/api/subscription-plans', updateUserActivity, subscriptionPlansRoutes);
app.use('/api/rating', updateUserActivity, ratingRoutes);
app.use('/api/profiles', updateUserActivity, profilesRoutes);
app.use('/api/photo-comments', updateUserActivity, photoCommentsRoutes);
app.use('/api/profile-comments', updateUserActivity, profileCommentsRoutes);
app.use('/api/reactions', updateUserActivity, reactionsRoutes);

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–æ–≤ –∫–ª—É–±–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
app.use('/api/club/auth', clubAuthRoutes);
app.use('/api/club/events', updateUserActivity, clubEventsRoutes);
app.use('/api/club/analytics', updateUserActivity, clubAnalyticsRoutes);
app.use('/api/club/user-events', updateUserActivity, clubUserEventsRoutes);
app.use('/api/club/chats', updateUserActivity, clubChatsRoutes);

// WebSocket –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
io.on('connection', (socket) => {
  console.log('‚úÖ WebSocket client connected:', socket.id);
  console.log('Client details:', {
    id: socket.id,
    handshake: {
      address: socket.handshake.address,
      headers: socket.handshake.headers,
      origin: socket.handshake.headers.origin
    }
  });

  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ –∫–ª—É–±–Ω–æ–≥–æ —á–∞—Ç–∞
  socket.on('join-club-chat', (data) => {
    const { clubId, eventId, userId } = data;
    const roomName = `club-chat-${clubId}-${eventId}-${userId}`;
    socket.join(roomName);
    console.log(`Client ${socket.id} joined room: ${roomName}`);
  });

  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ –æ–±—ã—á–Ω–æ–≥–æ —á–∞—Ç–∞ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
  socket.on('join-user-chat', (data) => {
    console.log('üîó Client requesting to join user chat:', data);
    const { fromUser, toUser } = data;
    const roomName = `user-chat-${fromUser}-${toUser}`;
    socket.join(roomName);
    console.log(`‚úÖ Client ${socket.id} joined user chat room: ${roomName}`);
    console.log('üë• Total clients in room now:', io.sockets.adapter.rooms.get(roomName)?.size || 0);
  });

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–ª—É–±–Ω–æ–º —á–∞—Ç–µ
  socket.on('club-chat-message', (data) => {
    const { clubId, eventId, userId, message, senderType } = data;
    const roomName = `club-chat-${clubId}-${eventId}-${userId}`;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–Ω–∞—Ç—ã
    io.to(roomName).emit('club-chat-message', {
      ...data,
      timestamp: new Date().toISOString()
    });
    
    console.log(`Message sent to room ${roomName}:`, message);
  });

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–±—ã—á–Ω–æ–º —á–∞—Ç–µ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
  socket.on('user-chat-message', (data) => {
    console.log('üì® Received user-chat-message on server:', data);
    const { fromUser, toUser, message, messageId } = data;
    const roomName = `user-chat-${fromUser}-${toUser}`;
    
    console.log('üè† Room name:', roomName);
    console.log('üë• Clients in room:', io.sockets.adapter.rooms.get(roomName)?.size || 0);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–Ω–∞—Ç—ã
    io.to(roomName).emit('user-chat-message', {
      ...data,
      timestamp: new Date().toISOString()
    });
    
    console.log(`‚úÖ User message sent to room ${roomName}:`, message);
  });

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
  socket.on('disconnect', (reason) => {
    console.log('‚ùå WebSocket client disconnected:', socket.id, 'Reason:', reason);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  socket.on('error', (error) => {
    console.error('‚ùå WebSocket error for client', socket.id, ':', error);
  });
});

// –î–µ–ª–∞–µ–º io –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è —Ä–æ—É—Ç–æ–≤
app.set('io', io);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API
app.get('/api/status', (req, res) => {
  res.json({ 
    status: 'ok', 
    message: 'SwingFox API —Ä–∞–±–æ—Ç–∞–µ—Ç',
    version: '1.0.0',
    timestamp: new Date().toISOString()
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ 
    error: process.env.NODE_ENV === 'production' 
      ? '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
      : err.message 
  });
});

// 404 –¥–ª—è API
app.use('/api/*', (req, res) => {
  res.status(404).json({ error: 'API endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω' });
});

// 404 –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (—ç—Ç–æ API-only —Å–µ—Ä–≤–µ—Ä)
app.use('*', (req, res) => {
  res.status(404).json({
    error: 'Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω. –≠—Ç–æ API —Å–µ—Ä–≤–µ—Ä, —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 443.'
  });
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
const startServer = async () => {
  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    await testConnection();
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ (—Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
    if (process.env.NODE_ENV === 'development') {
      console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...');
      await sequelize.sync({ force: false });
      console.log('‚úÖ –ú–æ–¥–µ–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º cron-–∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫
    console.log('üïê –ó–∞–ø—É—Å–∫ cron-–∑–∞–¥–∞—á –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏...');
    const subscriptionCron = new SubscriptionCron();
    subscriptionCron.start();
    console.log('‚úÖ Cron-–∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω—ã');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º cron-–∑–∞–¥–∞—á–∏ –¥–ª—è –∫–ª—É–±–æ–≤
    console.log('üïê –ó–∞–ø—É—Å–∫ cron-–∑–∞–¥–∞—á –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∫–ª—É–±–æ–≤...');
    const clubCron = new ClubCron();
    clubCron.start();
    console.log('‚úÖ Cron-–∑–∞–¥–∞—á–∏ –¥–ª—è –∫–ª—É–±–æ–≤ –∑–∞–ø—É—â–µ–Ω—ã');
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ HTTPS –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if (process.env.NODE_ENV === 'development') {
      try {
        // –ü—É—Ç–∏ –∫ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º
        const sslKeyPath = fs.existsSync('./ssl/localhost.key')
          ? './ssl/localhost.key'
          : '/app/ssl/localhost.key';
        const sslCertPath = fs.existsSync('./ssl/localhost.crt')
          ? './ssl/localhost.crt'
          : '/app/ssl/localhost.crt';

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ SSL —Ñ–∞–π–ª–æ–≤
        if (fs.existsSync(sslKeyPath) && fs.existsSync(sslCertPath)) {
          const httpsOptions = {
            key: fs.readFileSync(sslKeyPath),
            cert: fs.readFileSync(sslCertPath)
          };
          
          // –ó–∞–ø—É—Å–∫–∞–µ–º HTTPS —Å–µ—Ä–≤–µ—Ä
          const httpsServer = https.createServer(httpsOptions, app);
          const httpsIO = new Server(httpsServer, {
            cors: {
              origin: process.env.NODE_ENV === 'production' 
                ? ['https://swingfox.ru', 'https://www.swingfox.ru']
                : true,
              credentials: true
            }
          });
          
          // –ö–æ–ø–∏—Ä—É–µ–º WebSocket –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è HTTPS
          httpsIO.on('connection', (socket) => {
            console.log('WebSocket client connected (HTTPS):', socket.id);
            
            socket.on('join-club-chat', (data) => {
              const { clubId, eventId, userId } = data;
              const roomName = `club-chat-${clubId}-${eventId}-${userId}`;
              socket.join(roomName);
              console.log(`Client ${socket.id} joined room: ${roomName}`);
            });

            socket.on('join-user-chat', (data) => {
              console.log('üîó Client requesting to join user chat (HTTPS):', data);
              const { fromUser, toUser } = data;
              const roomName = `user-chat-${fromUser}-${toUser}`;
              socket.join(roomName);
              console.log(`‚úÖ Client ${socket.id} joined user chat room (HTTPS): ${roomName}`);
              console.log('üë• Total clients in room now (HTTPS):', httpsIo.sockets.adapter.rooms.get(roomName)?.size || 0);
            });

            socket.on('club-chat-message', (data) => {
              const { clubId, eventId, userId, message, senderType } = data;
              const roomName = `club-chat-${clubId}-${eventId}-${userId}`;
              
              httpsIO.to(roomName).emit('club-chat-message', {
                ...data,
                timestamp: new Date().toISOString()
              });
              
              console.log(`Message sent to room ${roomName}:`, message);
            });

            socket.on('user-chat-message', (data) => {
              console.log('üì® Received user-chat-message on server (HTTPS):', data);
              const { fromUser, toUser, message, messageId } = data;
              const roomName = `user-chat-${fromUser}-${toUser}`;
              
              console.log('üè† Room name (HTTPS):', roomName);
              console.log('üë• Clients in room (HTTPS):', httpsIo.sockets.adapter.rooms.get(roomName)?.size || 0);
              
              httpsIO.to(roomName).emit('user-chat-message', {
                ...data,
                timestamp: new Date().toISOString()
              });
              
              console.log(`‚úÖ User message sent to room ${roomName} (HTTPS):`, message);
            });

            socket.on('disconnect', () => {
              console.log('WebSocket client disconnected (HTTPS):', socket.id);
            });
          });
          
          httpsServer.listen(PORT, '0.0.0.0', () => {
            console.log('üöÄ SwingFox HTTPS —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É', PORT);
            console.log('üìç URL:', `https://localhost:${PORT}`);
            console.log('üîß –†–µ–∂–∏–º:', process.env.NODE_ENV || 'development');
            console.log('üì° API –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É:', `https://localhost:${PORT}/api`);
            console.log('üîå WebSocket –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É:', `wss://localhost:${PORT}`);
            console.log('üîí SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
          });
        } else {
          console.warn('‚ö†Ô∏è  SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∑–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä');
          console.warn('üí° –î–ª—è HTTPS –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: cd docker/ssl && ./generate-certs.sh');
          
          // Fallback –Ω–∞ HTTP
          app.listen(PORT, '0.0.0.0', () => {
            console.log('üöÄ SwingFox HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É', PORT);
            console.log('üìç URL:', `http://localhost:${PORT}`);
            console.log('üîß –†–µ–∂–∏–º:', process.env.NODE_ENV || 'development');
            console.log('üì° API –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É:', `http://localhost:${PORT}/api`);
          });
        }
      } catch (sslError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SSL:', sslError.message);
        console.log('üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –≤ –∫–∞—á–µ—Å—Ç–≤–µ fallback...');
        
        // Fallback –Ω–∞ HTTP
        httpServer.listen(PORT, '0.0.0.0', () => {
          console.log('üöÄ SwingFox HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É', PORT);
          console.log('üìç URL:', `http://localhost:${PORT}`);
          console.log('üîß –†–µ–∂–∏–º:', process.env.NODE_ENV || 'development');
          console.log('üì° API –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É:', `http://localhost:${PORT}/api`);
          console.log('üîå WebSocket –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É:', `ws://localhost:${PORT}`);
        });
      }
    } else {
      // Production —Ä–µ–∂–∏–º - –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å HTTPS, fallback –Ω–∞ HTTP
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–ª—è production
        const sslKeyPath = process.env.SSL_KEY_PATH || './ssl/production.key';
        const sslCertPath = process.env.SSL_CERT_PATH || './ssl/production.crt';
        
        if (fs.existsSync(sslKeyPath) && fs.existsSync(sslCertPath)) {
          const httpsOptions = {
            key: fs.readFileSync(sslKeyPath),
            cert: fs.readFileSync(sslCertPath)
          };
          
          const httpsServer = https.createServer(httpsOptions, app);
          
          // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Socket.IO –¥–ª—è HTTPS —Å–µ—Ä–≤–µ—Ä–∞
          const httpsIo = new Server(httpsServer, {
            cors: {
              origin: process.env.NODE_ENV === 'production' 
                ? ['https://swingfox.ru', 'https://www.swingfox.ru', 'https://88.218.121.216', 'http://88.218.121.216']
                : true,
              credentials: true,
              methods: ['GET', 'POST']
            }
          });
          
          // –ö–æ–ø–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ WebSocket
          httpsIo.on('connection', (socket) => {
            console.log('‚úÖ WebSocket client connected (HTTPS):', socket.id);
            console.log('Client details:', {
              id: socket.id,
              handshake: {
                address: socket.handshake.address,
                headers: socket.handshake.headers,
                origin: socket.handshake.headers.origin
              }
            });

            // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ –∫–ª—É–±–Ω–æ–≥–æ —á–∞—Ç–∞
            socket.on('join-club-chat', (data) => {
              const { clubId, eventId, userId } = data;
              const roomName = `club-chat-${clubId}-${eventId}-${userId}`;
              socket.join(roomName);
              console.log(`Client ${socket.id} joined room: ${roomName}`);
            });

            // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ –æ–±—ã—á–Ω–æ–≥–æ —á–∞—Ç–∞ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            socket.on('join-user-chat', (data) => {
              console.log('üîó Client requesting to join user chat (HTTPS):', data);
              const { fromUser, toUser } = data;
              const roomName = `user-chat-${fromUser}-${toUser}`;
              socket.join(roomName);
              console.log(`‚úÖ Client ${socket.id} joined user chat room (HTTPS): ${roomName}`);
              console.log('üë• Total clients in room now (HTTPS):', httpsIo.sockets.adapter.rooms.get(roomName)?.size || 0);
            });

            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–ª—É–±–Ω–æ–º —á–∞—Ç–µ
            socket.on('club-chat-message', (data) => {
              const { clubId, eventId, userId, message, senderType } = data;
              const roomName = `club-chat-${clubId}-${eventId}-${userId}`;
              
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–Ω–∞—Ç—ã
              httpsIo.to(roomName).emit('club-chat-message', {
                ...data,
                timestamp: new Date().toISOString()
              });
              
              console.log(`Message sent to room ${roomName}:`, message);
            });

            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–±—ã—á–Ω–æ–º —á–∞—Ç–µ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            socket.on('user-chat-message', (data) => {
              console.log('üì® Received user-chat-message on server (HTTP):', data);
              const { fromUser, toUser, message, messageId } = data;
              const roomName = `user-chat-${fromUser}-${toUser}`;
              
              console.log('üè† Room name (HTTP):', roomName);
              console.log('üë• Clients in room (HTTP):', httpsIo.sockets.adapter.rooms.get(roomName)?.size || 0);
              
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–Ω–∞—Ç—ã
              httpsIo.to(roomName).emit('user-chat-message', {
                ...data,
                timestamp: new Date().toISOString()
              });
              
              console.log(`‚úÖ User message sent to room ${roomName} (HTTP):`, message);
            });

            // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
            socket.on('disconnect', (reason) => {
              console.log('‚ùå WebSocket client disconnected (HTTPS):', socket.id, 'Reason:', reason);
            });

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            socket.on('error', (error) => {
              console.error('‚ùå WebSocket error for client', socket.id, ':', error);
            });
          });
          
          // –î–µ–ª–∞–µ–º httpsIo –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è —Ä–æ—É—Ç–æ–≤
          app.set('io', httpsIo);
          
          httpsServer.listen(PORT, '0.0.0.0', () => {
            console.log('üöÄ SwingFox HTTPS —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É', PORT);
            console.log('üìç URL:', `https://88.218.121.216:${PORT}`);
            console.log('üîß –†–µ–∂–∏–º:', process.env.NODE_ENV || 'production');
            console.log('üì° API –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É:', `https://88.218.121.216:${PORT}/api`);
            console.log('üîå WebSocket –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É:', `wss://88.218.121.216:${PORT}`);
            console.log('üîí SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
          });
        } else {
          console.warn('‚ö†Ô∏è  SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è production, –∑–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä');
          console.warn('üí° –î–ª—è HTTPS —Å–æ–∑–¥–∞–π—Ç–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –≤ –ø–∞–ø–∫–µ ssl/');
          
          // Fallback –Ω–∞ HTTP
          httpServer.listen(PORT, '0.0.0.0', () => {
            console.log('üöÄ SwingFox HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É', PORT);
            console.log('üìç URL:', `http://88.218.121.216:${PORT}`);
            console.log('üîß –†–µ–∂–∏–º:', process.env.NODE_ENV || 'production');
            console.log('üì° API –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É:', `http://88.218.121.216:${PORT}/api`);
            console.log('üîå WebSocket –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É:', `ws://88.218.121.216:${PORT}`);
          });
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ HTTPS –≤ production:', error.message);
        console.log('üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –≤ –∫–∞—á–µ—Å—Ç–≤–µ fallback...');
        
        // Fallback –Ω–∞ HTTP
        httpServer.listen(PORT, '0.0.0.0', () => {
          console.log('üöÄ SwingFox HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É', PORT);
          console.log('üìç URL:', `http://88.218.121.216:${PORT}`);
          console.log('üîß –†–µ–∂–∏–º:', process.env.NODE_ENV || 'production');
          console.log('üì° API –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É:', `http://88.218.121.216:${PORT}/api`);
          console.log('üîå WebSocket –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É:', `ws://88.218.121.216:${PORT}`);
        });
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
  }
};

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
startServer();

module.exports = app;