require('dotenv').config();
const express = require('express');
const https = require('https');
const fs = require('fs');
const cors = require('cors');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
const path = require('path');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const { sequelize, testConnection } = require('./src/config/database');

const app = express();
const PORT = process.env.PORT || 3001;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
app.use(helmet());
app.use(cors({
  origin: process.env.NODE_ENV === 'production' 
    ? ['https://swingfox.ru', 'https://www.swingfox.ru']
    : true,
  credentials: true
}));

// Rate limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
  max: 100, // –º–∞–∫—Å–∏–º—É–º 100 –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–¥–Ω–æ–≥–æ IP
  message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —ç—Ç–æ–≥–æ IP, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
});
app.use('/api/', limiter);

// –ü–∞—Ä—Å–∏–Ω–≥ JSON
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è API)
app.use('/uploads', express.static(path.join(__dirname, 'public/uploads')));

// –ò–º–ø–æ—Ä—Ç —Ä–æ—É—Ç–æ–≤
const authRoutes = require('./src/routes/auth');
const userRoutes = require('./src/routes/users');
const swipeRoutes = require('./src/routes/swipe');
const chatRoutes = require('./src/routes/chat');
const adsRoutes = require('./src/routes/ads');
const adminRoutes = require('./src/routes/admin');
const geoRoutes = require('./src/routes/geo');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–æ–≤
app.use('/api/auth', authRoutes);
app.use('/api/users', userRoutes);
app.use('/api/swipe', swipeRoutes);
app.use('/api/chat', chatRoutes);
app.use('/api/ads', adsRoutes);
app.use('/api/admin', adminRoutes);
app.use('/api/geo', geoRoutes);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API
app.get('/api/status', (req, res) => {
  res.json({ 
    status: 'ok', 
    message: 'SwingFox API —Ä–∞–±–æ—Ç–∞–µ—Ç',
    version: '1.0.0',
    timestamp: new Date().toISOString()
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ 
    error: process.env.NODE_ENV === 'production' 
      ? '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
      : err.message 
  });
});

// 404 –¥–ª—è API
app.use('/api/*', (req, res) => {
  res.status(404).json({ error: 'API endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω' });
});

// 404 –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (—ç—Ç–æ API-only —Å–µ—Ä–≤–µ—Ä)
app.use('*', (req, res) => {
  res.status(404).json({
    error: 'Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω. –≠—Ç–æ API —Å–µ—Ä–≤–µ—Ä, —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 443.'
  });
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
const startServer = async () => {
  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    await testConnection();
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ (—Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
    if (process.env.NODE_ENV === 'development') {
      console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...');
      await sequelize.sync({ force: false });
      console.log('‚úÖ –ú–æ–¥–µ–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ HTTPS –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if (process.env.NODE_ENV === 'development') {
      try {
        // –ü—É—Ç–∏ –∫ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º
        const sslKeyPath = fs.existsSync('./ssl/localhost.key')
          ? './ssl/localhost.key'
          : '/app/ssl/localhost.key';
        const sslCertPath = fs.existsSync('./ssl/localhost.crt')
          ? './ssl/localhost.crt'
          : '/app/ssl/localhost.crt';

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ SSL —Ñ–∞–π–ª–æ–≤
        if (fs.existsSync(sslKeyPath) && fs.existsSync(sslCertPath)) {
          const httpsOptions = {
            key: fs.readFileSync(sslKeyPath),
            cert: fs.readFileSync(sslCertPath)
          };
          
          // –ó–∞–ø—É—Å–∫–∞–µ–º HTTPS —Å–µ—Ä–≤–µ—Ä
          https.createServer(httpsOptions, app).listen(PORT, '0.0.0.0', () => {
            console.log('üöÄ SwingFox HTTPS —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É', PORT);
            console.log('üìç URL:', `https://localhost:${PORT}`);
            console.log('üîß –†–µ–∂–∏–º:', process.env.NODE_ENV || 'development');
            console.log('üì° API –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É:', `https://localhost:${PORT}/api`);
            console.log('üîí SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
          });
        } else {
          console.warn('‚ö†Ô∏è  SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∑–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä');
          console.warn('üí° –î–ª—è HTTPS –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: cd docker/ssl && ./generate-certs.sh');
          
          // Fallback –Ω–∞ HTTP
          app.listen(PORT, '0.0.0.0', () => {
            console.log('üöÄ SwingFox HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É', PORT);
            console.log('üìç URL:', `http://localhost:${PORT}`);
            console.log('üîß –†–µ–∂–∏–º:', process.env.NODE_ENV || 'development');
            console.log('üì° API –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É:', `http://localhost:${PORT}/api`);
          });
        }
      } catch (sslError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SSL:', sslError.message);
        console.log('üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –≤ –∫–∞—á–µ—Å—Ç–≤–µ fallback...');
        
        // Fallback –Ω–∞ HTTP
        app.listen(PORT, '0.0.0.0', () => {
          console.log('üöÄ SwingFox HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É', PORT);
          console.log('üìç URL:', `http://localhost:${PORT}`);
          console.log('üîß –†–µ–∂–∏–º:', process.env.NODE_ENV || 'development');
          console.log('üì° API –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É:', `http://localhost:${PORT}/api`);
        });
      }
    } else {
      // Production —Ä–µ–∂–∏–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º HTTP (HTTPS –¥–æ–ª–∂–µ–Ω –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ reverse proxy)
      app.listen(PORT, () => {
        console.log('üöÄ SwingFox —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É', PORT);
        console.log('üìç URL:', `http://localhost:${PORT}`);
        console.log('üîß –†–µ–∂–∏–º:', process.env.NODE_ENV || 'development');
        console.log('üì° API –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É:', `http://localhost:${PORT}/api`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
  }
};

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
startServer();

module.exports = app;